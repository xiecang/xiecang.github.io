<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cang&#39;s Bolg</title>
  
  
  <link href="https://xiecang.cc/atom.xml" rel="self"/>
  
  <link href="https://xiecang.cc/"/>
  <updated>2022-02-07T02:54:41.000Z</updated>
  <id>https://xiecang.cc/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统之内存管理</title>
    <link href="https://xiecang.cc/memory-management/"/>
    <id>https://xiecang.cc/memory-management/</id>
    <published>2019-05-03T07:01:22.000Z</published>
    <updated>2022-02-07T02:54:41.000Z</updated>
    
    <content type="html"><![CDATA[<pre class="mermaid">graph TDA[提纲] --&gt; B(虚拟内存)A --&gt; C(内存分段)A --&gt; D(内存分页)</pre><span id="more"></span><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>对于没有操作系统的机器（如单片机）或早期简单操作系统的机器来说， cpu 是直接操作内存的「物理地址」</p><p>在这种情况下，如果想同时运行两个程序</p><p>那么可以这么解决<br>某台计算机总的内存大小是 128M，现在同时运行两个程序 A 和 B，A 需占用内存 10M，B 需占用内存 110M。</p><ol><li>先将内存中的前 10M 分配给程序 A</li><li>接着再从内存中剩余的 118M 中划分出 110M 分配给程序 B</li></ol><p>但是这种简单的内存分配策略问题很多</p><ol><li>进程地址空间不隔离。恶意程序可以随意修改别的进程的内存数据，有 bug 的程序也可能不小心修改了其它程序的内存数据，导致其它程序的运行出现异常。</li><li>内存使用效率低。在 A 和 B 都运行的情况下，如果用户又运行了程序 C，而程序 C 需要 20M 大小的内存才能运行，而此时系统只剩下 8M 的空间可供使用，就需要把一个已经运行的程序的数据暂时拷贝到硬盘上，释放出空间公程序 C 使用，然后再将程序 C 的数据全部装入内存中运行。这个过程，有大量的数据在装入装出，导致效率十分低下。</li><li>程序运行的地址不确定。当内存中的剩余空间可以满足程序 C 的要求后，操作系统会在剩余空间中随机分配一段连续的 20M 大小的空间给程序 C 使用，因为是随机分配的，所以程序运行的地址是不确定的。</li></ol><h3 id="那怎么解决这个问题的呢？"><a href="#那怎么解决这个问题的呢？" class="headerlink" title="那怎么解决这个问题的呢？"></a>那怎么解决这个问题的呢？</h3><p>这里问题的关键是，直接操作了「物理地址」，而物理地址只有唯一的一个，<br>操作系统的解决方案是为每一个进程分配独立的一套「虚拟地址」</p><pre class="mermaid">graph TDA(进程) --&gt; B(虚拟内存)B --&gt; C(物理内存)</pre><p><strong>操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。</strong></p><p>程序访问虚拟内存的时候，操作系统把虚拟内存转换成不同的内存地址，这样，不同的程序运行的时候就不会冲突了。</p><blockquote><p>我们程序所使用的内存地址叫做虚拟内存地址（Virtual Memory Address）<br>实际存在硬件里面的空间地址叫物理内存地址（Physical Memory Address）。</p></blockquote><p>CPU 芯片中内存管理单元（MMU）负责把虚拟地址转换成物理地址</p><h3 id="操作系统是如何管理虚拟地址与物理地址之间的关系？"><a href="#操作系统是如何管理虚拟地址与物理地址之间的关系？" class="headerlink" title="操作系统是如何管理虚拟地址与物理地址之间的关系？"></a>操作系统是如何管理虚拟地址与物理地址之间的关系？</h3><p>主要有两种方式，内存分段、内存分页</p><h2 id="内存分段"><a href="#内存分段" class="headerlink" title="内存分段"></a>内存分段</h2><p>程序是由若干个逻辑分段组成的，如可由代码分段、数据分段、栈段、堆段组成。不同的段是有不同的属性的，所以就用分段（Segmentation）的形式把这些段分离出来。</p><p>它的思想是在虚拟地址空间和物理地址空间之间做一一映射。比如说虚拟地址空间中某个 10M 大小的空间映射到物理地址空间中某个 10M 大小的空间。这种思想理解起来并不难，操作系统保证不同进程的地址空间被映射到物理地址空间中不同的区域上，这样每个进程最终访问到的</p><p>假设有两个进程 A 和 B，<br>进程 A 所需内存大小为 10M，其虚拟地址空间分布在 0x00000000 到 0x00A00000，<br>进程 B 所需内存为 100M，其虚拟地址空间分布为 0x00000000 到 0x06400000。</p><p>那么按照分段的映射方法，<br>进程 A 在物理内存上映射区域为 0x00100000 到 0x00B00000，<br>进程 B 在物理内存上映射区域为 0x00C00000 到 0x07000000。</p><p>于是进程 A 和进程 B 分别被映射到了不同的内存区间，彼此互不重叠，实现了地址隔离。<br>从应用程序的角度看来，进程 A 的地址空间就是分布在 0x00000000 到 0x00A00000，在做开发时，开发人员只需访问这段区间上的地址即可。应用程序并不关心进程 A 究竟被映射到物理内存的那块区域上了，所以程序的运行地址也就是相当于说是确定的了。</p><p>分段解决了，问题 1、3，（<strong>进程地址空间不隔离</strong>、<strong>程序运行的地址不确定</strong>），但是没有解决问题 2 <strong>内存使用效率低</strong><br>另外，还会带来<strong>内存碎片</strong>的问题</p><h3 id="分段为什么会产生内存碎片的问题？"><a href="#分段为什么会产生内存碎片的问题？" class="headerlink" title="分段为什么会产生内存碎片的问题？"></a>分段为什么会产生内存碎片的问题？</h3><p>假设有 1G 的物理内存，用户执行了多个程序，其中：</p><pre><code>A占用了 512MB 内存B占用了 128MB 内存C占用了 256 MB 内存。</code></pre><p>这个时候，如果我们关闭了 B，则空闲内存还有 1024 - 512 - 256 &#x3D; 256MB。</p><p>如果这个 256MB 不是连续的，被分成了两段 128 MB 内存，这就会导致没有空间再打开一个 200MB 的程序。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">物理内存</span><br><span class="line">|------------------------------------------------------------------------|</span><br><span class="line">开启 A B C 三个程序</span><br><span class="line">|----------------------------|----------|-------------------|-------------|</span><br><span class="line">|          A 512M            |  B 128M  |      C 256M       |  空闲 128M  |</span><br><span class="line">关闭 B 程序</span><br><span class="line">|----------------------------|----------|-------------------|-------------|</span><br><span class="line">|          A 512M            | 空闲 128M |      C 256M       |  空闲 128M  |</span><br></pre></td></tr></table></figure><p>内存碎片的问题共有两处地方：</p><pre><code>外部内存碎片，也就是产生了多个不连续的小物理内存，导致新的程序无法被装载；内部内存碎片，程序所有的内存都被装载到了物理内存，但是这个程序有部分的内存可能并不是很常使用，这也会导致内存的浪费；</code></pre><p>解决外部内存碎片的问题就是<strong>内存交换</strong>。</p><p>可以把 程序 C 占用的那 256MB 内存写到硬盘上，然后再从硬盘上读回来到内存里。<br>写的时候紧跟着 A 程序 512M 后写，这样，可空出完整的 256M 空间，新的 200MB 程序就可以装载进来。</p><blockquote><p>内存交换空间，在 Linux 系统里，也就是我们常看到的 Swap 空间，这块空间是从硬盘划分出来的，用于内存与硬盘的空间交换。</p></blockquote><h2 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h2><p>要解决内存分段带来的内存碎片和内存使用效率低问题，主要思路是</p><ol><li>减少出现一些内存碎片</li><li>当需要进行内存交换的时候，让需要交换写入或者从磁盘装载的数据更少一点</li></ol><p>这个办法，也就是<strong>内存分页（Paging）</strong>。<br><strong>分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小</strong>。这样一个连续并且尺寸固定的内存空间，我们叫页（Page）。在 Linux 下，每一页的大小为 4KB。</p><p>虚拟地址与物理地址之间通过页表来映射<br>页表实际上存储在 CPU 的内存管理单元 （MMU）<br>于是 CPU 就可以直接通过 MMU，找出要实际要访问的物理内存地址。</p><p>而当进程访问的虚拟地址在页表中查不到时，系统会产生一个缺页异常，进入系统内核空间分配物理内存、更新进程页表，最后再返回用户空间，恢复进程的运行。</p><h3 id="分页是如何解决分段的内存碎片、内存交换效率低的问题？"><a href="#分页是如何解决分段的内存碎片、内存交换效率低的问题？" class="headerlink" title="分页是如何解决分段的内存碎片、内存交换效率低的问题？"></a>分页是如何解决分段的内存碎片、内存交换效率低的问题？</h3><p>由于内存空间都是预先划分好的，也就不会像分段会产生间隙非常小的内存，这正是分段会产生内存碎片的原因。<br>而<strong>采用了分页，那么释放的内存都是以页为单位释放的，也就不会产生无法给进程使用的小内存</strong>。</p><p>如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给释放掉，也就是暂时写在硬盘上，<br>称为<strong>换出（Swap Out）</strong>。一旦需要的时候，再加载进来，称为<strong>换入（Swap In）</strong>。所以，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，<strong>内存交换的效率就相对比较高</strong>。</p><p>另外，可以在进行虚拟内存和物理内存的页之间的映射之后，并不真的把页加载到物理内存里，而是<strong>只有在程序运行中，需要用到对应虚拟内存页里面的指令和数据时，再加载到物理内存里面去。</strong></p><h3 id="分页机制下，虚拟地址和物理地址是如何映射的？"><a href="#分页机制下，虚拟地址和物理地址是如何映射的？" class="headerlink" title="分页机制下，虚拟地址和物理地址是如何映射的？"></a>分页机制下，虚拟地址和物理地址是如何映射的？</h3><p>对于一个内存地址转换，其实就是这样三个步骤：</p><pre><code>把虚拟内存地址，切分成页号和偏移量；根据页号，从页表里面，查询对应的物理页号；直接拿物理页号，加上前面的偏移量，就得到了物理内存地址。</code></pre><h3 id="简单的分页有什么缺陷吗？"><a href="#简单的分页有什么缺陷吗？" class="headerlink" title="简单的分页有什么缺陷吗？"></a>简单的分页有什么缺陷吗？</h3><p>有空间上的缺陷。</p><p>因为操作系统是可以同时运行非常多的进程的，那这不就意味着页表会非常的庞大。</p><p>在 32 位的环境下，虚拟地址空间共有 4GB，假设一个页的大小是 4KB（2^12），那么就需要大约 100 万 （2^20） 个页，每个「页表项」需要 4 个字节大小来存储，那么整个 4GB 空间的映射就需要有 4MB 的内存来存储页表。</p><p>这 4MB 大小的页表，看起来也不是很大。但是要知道每个进程都是有自己的虚拟地址空间的，也就说都有自己的页表。</p><p>那么，100 个进程的话，就需要 400MB 的内存来存储页表，这是非常大的内存了，更别说 64 位的环境了。</p><h2 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h2><p>要解决上面的问题，就需要采用的是一种叫作<strong>多级页表（Multi-Level Page Table）</strong>的解决方案。</p><p>我们把这个 100 多万个(（2^20）)「页表项」的单级页表再分页，<br>将页表（一级页表）分为 1024 个页表（二级页表），<br>每个表（二级页表）中包含 1024 个「页表项」，形成二级分页。</p><p>如果使用了二级分页，一级页表就可以覆盖整个 4GB 虚拟地址空间，但<strong>如果某个一级页表的页表项没有被用到，也就不需要创建这个页表项对应的二级页表了，即可以在需要时才创建二级页表。</strong></p><p>假设只有 20% 的一级页表项被用到了，<br>那么页表占用的内存空间就只有 4KB（一级页表） + 20% * 4MB（二级页表）&#x3D; 0.804MB，<br>这对比单级页表的 4MB 是不是一个巨大的节约？</p><blockquote><p>对于 64 位的系统，两级分页肯定不够了，就变成了四级目录，分别是：<br>全局页目录项 PGD（Page Global Directory）；<br>上层页目录项 PUD（Page Upper Directory）；<br>中间页目录项 PMD（Page Middle Directory）；<br>页表项 PTE（Page Table Entry）；</p></blockquote><h3 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h3><p>多级页表虽然解决了空间上的问题，但是虚拟地址到物理地址的转换就多了几道转换的工序，这显然就降低了这俩地址转换的速度，也就是带来了时间上的开销。</p><p>程序是有局部性的，即在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。</p><p>于是在 CPU 芯片中，加入了一个专门存放程序最常访问的页表项的 Cache，这个 Cache 就是 TLB（Translation Lookaside Buffer） ，通常称为页表缓存、转址旁路缓存、快表等。</p><p>在 CPU 芯片里面，封装了内存管理单元（Memory Management Unit）芯片，它用来完成地址转换和 TLB 的访问与交互。</p>]]></content>
    
    
    <summary type="html">&lt;pre class=&quot;mermaid&quot;&gt;
graph TD
A[提纲] --&amp;gt; B(虚拟内存)
A --&amp;gt; C(内存分段)
A --&amp;gt; D(内存分页)

&lt;/pre&gt;</summary>
    
    
    
    
    <category term="操作系统" scheme="https://xiecang.cc/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="内存管理" scheme="https://xiecang.cc/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>[转]德鲁克谈《自我管理》</title>
    <link href="https://xiecang.cc/self-manager/"/>
    <id>https://xiecang.cc/self-manager/</id>
    <published>2019-04-18T09:49:40.000Z</published>
    <updated>2022-01-27T03:19:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>文章目录</strong></p><p>★背景介绍</p><p>★0、前言<br>★1、我的长处是什么？<br>★2、我的工作方式是怎样的？<br>★3、我如何学习？<br>★4、我的价值观是什么？<br>★5、我属于何处？<br>★6、我该做什么贡献？<br>★7、我要如何处理人际关系？<br>★8、我该如何管理后半生？</p> <span id="more"></span><h2 id="★背景介绍"><a href="#★背景介绍" class="headerlink" title="★背景介绍"></a>★背景介绍</h2><p>​《管理自己》(《Managing Oneself》)。此文刊登在十年前（2008）的《哈佛商业评论》（HBR）上，号称是 HBR“有屎以来”（创刊后）重印次数最多的文章。</p><h3 id="◇关于《哈佛商业评论》（Harvard-Business-Review）"><a href="#◇关于《哈佛商业评论》（Harvard-Business-Review）" class="headerlink" title="◇关于《哈佛商业评论》（Harvard Business Review）"></a>◇关于《<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTkzJTg4JUU0JUJEJTlCJUU1JTk1JTg2JUU2JUE1JUFEJUU4JUE5JTk1JUU4JUFCJTk2">哈佛商业评论<i class="fa fa-external-link-alt"></i></span>》（<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSGFydmFyZF9CdXNpbmVzc19SZXZpZXc=">Harvard Business Review<i class="fa fa-external-link-alt"></i></span>）</h3><p>​哈佛商业评论》，简称“HBR”。在管理界，那可算是大名鼎鼎、如雷贯耳。别的不说，单凭它出自同样大名鼎鼎的【<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTkzJTg4JUU0JUJEJTlCJUU1JTk1JTg2JUU1JUFEJUE2JUU5JTk5JUEy">哈佛大学商学院<i class="fa fa-external-link-alt"></i></span>】，就知道这刊物的逼格有多高。 </p><p>　　顺便说一下：再过4年（2022），该刊物就将迎来百年庆。 </p><h3 id="◇关于“彼得·德鲁克”（Peter-F-Drucker）"><a href="#◇关于“彼得·德鲁克”（Peter-F-Drucker）" class="headerlink" title="◇关于“彼得·德鲁克”（Peter F. Drucker）"></a>◇关于“<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUJEJUJDJUU1JUJFJTk3JUMyJUI3JUU1JUJFJUI3JUU5JUIyJTgxJUU1JTg1JThC">彼得·德鲁克<i class="fa fa-external-link-alt"></i></span>”（<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGV0ZXJfRHJ1Y2tlcg==">Peter F. Drucker<i class="fa fa-external-link-alt"></i></span>）</h3><p><img src="/assets/%E5%BE%B7%E9%B2%81%E5%85%8B.jpeg" alt="彼得·德鲁克" loading="lazy"></p><p>​此文作者德鲁克（又译“杜拉克”），被尊称为【管理学之父】。知名的《经济学人》杂志评价他是【大师中的大师】。 </p><p>　　这位老兄不但著作等身，而且每本书都是质量上乘。下面列举他的【部分】著作。从中也可以看出：他创作的时间跨度很长，称得上是“与时俱进”。</p><blockquote><p>《经济人的末日》（The End of Economic Man）　1939年<br>《工业人的未来》（The Future of Industrial Man）　1942年<br>《管理实践》（The Practice of Management）　1954年<br>《卓有成效的管理者》（The Effective Executive）　1966年<br>《管理——使命、责任、实务》（Management——Tasks, Responsibilities, Practices）　1973年<br>《动荡时代中的管理》（Managing in Turbulent Times）　1980年<br>《变动中的管理界》（The Changing World of the Executive）　1982年<br>《新现实——政府与政治、经济与企业、社会与世界》（The New Realities——in Government and Politics, in Economics and Business, in Society and World View）　1989年<br>《后资本主义社会》（Post-Capitalist Society）　1993年<br>《巨变时代的管理》（Managing in a Time of Great Change）　1995年<br>《21世纪的管理挑战》（Management Challenges for 21st Century）　1999年<br>《下一个社会的管理》（Managing in the Next Society）　2002年</p></blockquote><h3 id="◇关于此文"><a href="#◇关于此文" class="headerlink" title="◇关于此文"></a>◇关于此文</h3><p>​ 今天分享的这篇《Managing Oneself》实际上是摘自他1999年出版的《<strong>21世纪的管理挑战</strong>》一书的第6章（也是最后一章）。 </p><p>　　为啥要分享此文？因为【<strong>这篇长文对每个人都很有帮助</strong>】。通过此文的借鉴，可以帮助你更好地规划自己的职业生涯和人生。 </p><h2 id="★0、前言"><a href="#★0、前言" class="headerlink" title="★0、前言"></a>★0、前言</h2><p>​我们生活的这个时代充满着前所未有的机会：如果你有雄心，又不乏智慧，那么不管你从何处起步，你都可以沿着自己所选择的道路登上事业的顶峰。  </p><p>　　不过，有了机会，也就有了责任。今天的公司并不怎么管员工的职业发展；实际上，知识工作者必须成为自己的首席执行官。你应该在公司中开辟自己的天地，知道何时改变发展道路，并在可能长达50年的职业生涯中不断努力、干出实绩。要做好这些事情，你首先要对自己有深刻的认识——不仅清楚自己的优点和缺点，也知道自己是怎样学习新知识和与别人共事的，并且还明白自己的价值观是什么、自己又能在哪些方面做出最大贡献。因为只有当所有工作都从自己的长处着眼，你才能真正做到卓尔不群。  </p><p>　　历史上的伟人——拿破仑、达芬奇、莫扎特——都很善于自我管理。这在很大程度上也是他们成为伟人的原因。不过，他们属于不可多得的奇才，不但有着不同于常人的天资，而且天生就会管理自己，因而才取得了不同于常人的成就。而<strong>我们当中的大多数人，甚至包括那些还算有点天赋的人，都不得不通过学习来掌握自我管理的技巧</strong>。  </p><p>　　我们必须学会自我发展，必须知道把自己放在什么样的位置上，才能做出最大的贡献，而且还必须在长达50年的职业生涯中保持着高度的警觉和投入——也就是说，我们得知道自己应该何时换工作，以及该怎么换。 </p><h2 id="★1、我的长处是什么？"><a href="#★1、我的长处是什么？" class="headerlink" title="★1、我的长处是什么？"></a>★1、我的长处是什么？</h2><p>​      <strong>多数人都以为他们知道自己擅长什么，其实不然！</strong>更多的情况是，人们只知道自己不擅长什么——即便是在这一点上，人们也往往认识不清。然而，一个人要有所作为，只能靠发挥自己的长处，而如果从事自己不太擅长的工作是无法取得成就的，更不用说那些自己根本干不了的事情。  </p><p>　　以前的人没有什么必要去了解自己的长处，因为一个人的出身就决定了他一生的地位和职业：农民的儿子也会当农民，工匠的女儿会嫁给另一个工匠等。但是，现在人们有了选择。我们需要知己所长，才能知己所属。  </p><p>　　<strong>要发现自己的长处，唯一途径就是回馈分析法</strong>（feedback analysis）。每当做出重要决定或采取重要行动时，你都可以事先记录下自己对结果的预期。9到12个月后，再将实际结果与自己的预期比较。我本人采用这种方法已有15到20年了，而每次使用都有意外的收获。</p><p><img src="/assets/%E6%88%91%E7%9A%84%E9%95%BF%E5%A4%84%E6%98%AF%E4%BB%80%E4%B9%88.png" alt="我的长处是什么" loading="lazy"></p><p>​比如，回馈分析法使我看到，我对专业技术人员，不管是工程师、会计师还是市场研究人员，都容易从直觉上去理解他们。这令我大感意外。它还使我看到，我其实与那些涉猎广泛的通才没有什么共鸣。</p><p>　　回馈分析法并不是什么新鲜的东西。早在14世纪，这种方法由一个原本会永远默默无闻的德国神学家发明，大约150年后被法国神学家约翰·加尔文和西班牙神学家圣依纳爵分别采用。他们都把这种方法用于其信徒的修行。事实上，回馈分析法使他们的信徒养成了一种始终注重实际表现和结果的习惯，这也是他们创立的教派——加尔文教会和耶稣会——能够主宰欧洲长达30年的原因。  </p><p>　　<strong>我们只要持之以恒地运用这个简单的方法，就能在较短的时间内（可能两三年），发现自己的长处——这是你需要知道的最重要的事情。</strong>在采用这种方法之后，你就能知道，自己正在做（或没有做）的哪些事情会让你的长处无法发挥出来。同时，你也将看到自己在哪些方面能力不是特别强。最后，你还将了解到自己在哪些方面完全不擅长，做不出成绩来。  </p><p>　　根据回馈分析的启示，你需要在几方面采取行动。  </p><p>　　首先，最重要的是，专注于你的长处，把自己放到那些能发挥长处的地方。  </p><p>　　其次，加强你的长处。回馈分析会迅速地显示，你在哪些方面需要改善自己的技能或学习新技能。它还将显示你在知识上的差距——这些差距通常都可以弥补。数学家是天生的，但是人人都能学习三角学。  </p><p>　　第三，发现任何由于恃才傲物而造成的偏见和无知，并且加以克服。有太多的人，尤其是那些术业有专攻的人，往往对其他领域的知识不屑一顾，或者认为聪明的头脑就可取代知识。比如，很多一流的工程师遇上与人相关的事就束手无策，他们还以此为荣——因为他们觉得，对条理清晰的工程师头脑来说，人太混乱无序了。与此形成鲜明对照的是，人力资源方面的专业人员常常以他们连基本的会计知识或数量分析都一无所知而自傲。不过，人们要是对这样的无知还沾沾自喜的话，那无异于自取灭亡。其实，要让自己的长处得到充分发挥，你就应该努力学习新技能、汲取新知识。  </p><p>　　<strong>另外一点也同样重要——纠正你的不良习惯。所谓不良习惯，是指那些会影响你的工作成效和工作表现的事情。这样的习惯能很快地在回馈中反映出来。</strong>例如，一位企划人员可能发现自己美妙的计划最终落空，原因是他没有把计划贯彻到底。同那些才华横溢的人一样，他也相信好的创意能够移动大山。但是，真正移山的是推土机，创意只不过是为推土机指引方向，让它知道该到何处掘土。这位企划人员必须意识到不是计划做好就大功告成，接下来还得找人执行计划，并向他们解释计划，在付诸行动前须做出及时的调整和修改，最后要决定何时中止计划。  </p><p>　　与此同时，回馈还会反映出哪些问题是由缺乏礼貌造成的。礼貌是一个组织的润滑剂。两个移动物相互接触时发生摩擦是一个自然规律，不仅无生命的物体是这样，人类也是如此。礼貌，其实也很简单，无非是说声“请”和“谢谢”，记住别人的名字，或问候对方家人这样的小事，但就是这种不起眼的细节，使得两个人能够融洽相处，不管他们彼此之间是否有好感。许多聪明人，尤其是聪明的年轻人，没有意识到这一点。如果回馈分析表明某个人只要一遇到需要别人合作的事就屡屡失败，那么很可能就意味着这个人的举止不大得体——也就是缺乏礼貌。  </p><p>　　<strong>把预期和实际结果进行比较，也会发现自己不擅长做什么。</strong>我们每个人都有许多一窍不通、毫无天分的领域，在这些领域我们甚至连平庸的水平都达不到。人们，尤其是知识工作者，就不应该试图去完成这些领域的工作和任务。他们应该<strong>尽量少把精力浪费在那些不能胜任的领域上，因为“从无能到平庸”要比“从一流到卓越”需要人们付出多得多的努力</strong>。然而，大多数人，尤其是教师，还有组织，都一门心思要把能力低下的人变成合格者。其实，他们还不如把精力、资源和时间花在将称职者培养成佼佼者上。 </p><h2 id="★2、我的工作方式是怎样的？"><a href="#★2、我的工作方式是怎样的？" class="headerlink" title="★2、我的工作方式是怎样的？"></a>★2、我的工作方式是怎样的？</h2><p>　　令人惊讶的是，很少有人知道自己平时是怎样把事情给做成的。实际上，我们当中的大多数人甚至不知道不同人有着不同的工作方式和表现。许多人不是以他们习惯的方式工作，这当然就容易造成无所作为。对于知识工作者来说，“我的工作方式是怎样的？”可能比“我的长处是什么？”这个问题更加重要。  </p><p>　　同一个人的长处一样，<strong>一个人的工作方式也是独一无二的——这是由人的个性所决定的</strong>。不管个性是先天决定的，还是后天培养的，它肯定是早在一个人进入职场前就形成了。正如一个人擅长什么、不擅长什么是既定的一样，<strong>一个人的工作方式也基本固定，它可以略微有所调整，但是不可能完全改变</strong>——当然也不会轻易改变。而且就像人们从事自己最拿手的工作容易做出成绩一样，他们要是采取了自己最擅长的工作方式也容易取得成就。通常，几个常见的个性特征就决定了一个人的工作方式。 </p><p><img src="/assets/%E6%88%91%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84.png" alt="我的工作方式是怎样的" loading="lazy"></p><p>　　<strong>我属于读者型，还是听者型？</strong>  </p><p>　　首先，你要搞清楚的是，你是读者型（习惯阅读信息）还是听者型（习惯听取信息）的人。绝大多数人甚至都不知道还有“读者型”和“听者型”之说，而且很少有人既是读者型又是听者型。知道自己属于哪种类型的人更少。但是，有一些例子说明了这样的无知可能造成多大的危害。  </p><p>　　德怀特·艾森豪威尔担任欧洲盟军最高统帅时，一直是新闻媒体的宠儿。他的记者招待会以其独特的风格出名——不管记者提出什么问题，艾森豪威尔将军都从容地对答如流。无论是介绍情况，还是解释政策，他都能够用两三句言简意赅的话就说清楚。十年后，艾森豪威尔当上了总统，当年曾对他十分崇拜的同一批记者，这时却公开瞧不起他。他们抱怨说，他从不正面回答问题，而是喋喋不休地胡侃着其他事情。他们总是嘲笑他回答问题时语无伦次，不合乎语法，糟蹋标准英语。  </p><p>　　艾森豪威尔显然不知道自己属于读者型，而不是听者型。当他担任欧洲盟军最高统帅时，他的助手设法确保媒体提出的每一个问题至少在记者招待会开始前半小时以书面形式提交。这样，艾森豪威尔就完全掌握了记者提出的问题。而当他就任总统时，他的两个前任都是听者型——富兰克林·罗斯福和哈里·杜鲁门。这两位总统知道自己是听者型的，并且都喜欢举行畅所欲言的记者招待会。艾森豪威尔可能认为他必须去做两位前任所做的事。可是，他甚至连记者们在问些什么都从来没听清楚过。而且，艾森豪威尔并不是个极端的例子。  </p><p>　　几年后，林登·约翰逊把自己的总统职位给搞砸了，这在很大程度上是因为他不知道自己是听者型的人。他的前任约翰·肯尼迪是个读者型的人，他搜罗了一些出色的笔杆子当他的助手，要求他们每次进行当面讨论之前务必先给他写通报。约翰逊留下了这些人，他们则继续写通报。可是他显然根本看不懂他们写的东西。不过，约翰逊以前当参议员时曾经表现非凡，因为议员首先必须是听者型。</p><p>　　<strong>没有几个听者型的人可以通过努力变成合格的读者型——不管是主动还是被动的努力；反之亦然。</strong>因此，试图从听者型转为读者型的人会遭受林登·约翰逊的命运，而试图从读者型转为听者型的人会遭受德怀特·艾森豪威尔的命运。他们都不可能发挥才干或取得成就。</p><h2 id="★3、我如何学习？"><a href="#★3、我如何学习？" class="headerlink" title="★3、我如何学习？"></a>★3、我如何学习？</h2><p>​ <strong>要了解一个人的工作方式，需要弄清的第二点是，他是如何学习的。</strong></p><p>　　许多一流的笔杆子都不是好学生——温斯顿·邱吉尔就是一例。在他们的记忆中，上学往往是十足的折磨。然而，他们的同学有这种记忆的却很少。他们可能在学校里得不到什么乐趣，对他们来说上学的最大痛苦是无聊。有关这个问题的解释是，笔头好的人一般不靠听和读来学习，而靠写来学习，这已成了一种规律。学校不让他们以这种方式学习，所以他们的成绩总是很糟糕。</p><p> 　　所有的学校都遵循这样的办学思路：只有一种正确的学习方式，而且人人都得遵从。但是，<strong>对学习方式跟别人不大一样的学生来说，被迫按学校教的方式来学习就是地狱</strong>。实际上，学习大概有六七种不同的方式。 </p><p>　　像邱吉尔这样的人靠写来学习。还有些人以详尽的笔记来学习。例如，贝多芬留下了许多随笔小抄，然而他说，实际上他作曲时从来不看这些随笔小抄。当被问及他为什么还要用笔记下来时，据说他回答道：“如果我不马上写下来的话，我很快就会忘得一干二净。如果我把它们写到小本子上，我就永远不会忘记了，也用不着再看一眼。”有些人在实干中学习。另一些人通过听自己讲话学习。</p><p>　　我认识一位公司总经理，他把一个平庸的小家族企业发展成行业领军企业。他是一个通过讲话学习的人。他习惯于每周一次把全体高层管理人员召集到他的办公室，随后对他们讲上两三个小时。他总是提出政策性问题，在每一个问题上提出三种不同观点。但他很少请这帮同事发表意见或提出问题，他只需要听众听他讲话。这就是他的学习方式。虽然他是一个比较极端的例子，但是通过讲话学习绝不是一种少见的方法。成功的出庭律师也以同样的方式学习，许多诊断医师也是如此（我自己也是这样）。</p><p>　　在所有最重要的自我认识当中，最容易做到的就是知道自己是怎样学习的。当我问人们：“你怎么学习？”大多数人都知道答案。但是，当我问：“你根据这个认识来调整自己的行为吗？”没有几个人回答“是”。然而，知行合一是取得成就的关键；如果知行不合一，人们就会无所作为。</p><p>　　我属于读者型还是听者型？我如何学习？这是你首先要问自己的问题。但是，光这些问题显然不够。要想做好自我管理，你还需要问这样的问题：我能与别人合作得好吗？还是喜欢单枪匹马？如果你确实有与别人进行合作的能力，你还得问问这个问题：我在怎样的关系下与他人共事？</p><p>　　有些人适合当部属。二战时期美国的大英雄乔治·巴顿将军是一个很好的例子。巴顿是美军的一名高级将领。然而，当有人提议他担任独立指挥官时，美国陆军参谋长（可能也是美国历史上最成功的伯乐）乔治·马歇尔将军说：“巴顿是美国陆军造就的最优秀的部下，但是，他会成为最差劲的司令官。”</p><p>　　一些人作为团队成员工作最出色；另一些人单独工作最出色。一些人当教练和导师特别有天赋；另一些人却没能力做导师。</p><p>　　另一个关键的问题是，<strong>我如何才能取得成果——是作为决策者还是作为顾问</strong>？ </p><p>　　许多人做顾问时的表现会很出色，但是不能够承担决策的负担和压力。与此相反，也有许多人需要顾问来迫使他们思考，随后他们才能做出决定，接着迅速、自信和大胆地执行决定。</p><p>　　顺便说一下，一个组织的二号人物在提升到一号职位时常常失败，也正是因为这个原因。最高职位需要一个决策者，而一个强势的决策者常常把其信赖的人放在二号位置，当他的顾问。顾问在二号位置上往往是很出色的，但是换到一号位置，他就不行了。他虽然知道应该做出什么样的决定，但是不能接受真正做决定的责任。 </p><p>　　其他有助于认识自我的重要问题包括： </p><blockquote><p>1、我是在压力下表现出色，还是适应一种按部就班、可预测的工作环境？<br>2、我是在一个大公司还是在一个小公司中工作表现最佳？<br>3、在各种环境下都工作出色的人寥寥无几。 </p></blockquote><p>　　我不止一次地看到有些人在大公司中十分成功，换到小公司中则很不顺利。反过来也是如此。下面这个结论值得我们反复强调：<strong>不要试图改变自我，因为这样你不大可能成功。但是，你应该努力改进你的工作方式</strong>另外，不要从事你干不了或干不好的工作。</p><p><img src="/assets/%E6%88%91%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0.png" alt="如何学习" loading="lazy"></p><h2 id="★4、我的价值观是什么？"><a href="#★4、我的价值观是什么？" class="headerlink" title="★4、我的价值观是什么？"></a>★4、我的价值观是什么？</h2><p> 　　要能够自我管理，你最后不得不问的问题是：我的价值观是什么？这不是一个有关伦理道德的问题。道德准则对每一个人都一样。要对一个人的道德进行测试，方法很简单。我把它称为“镜子测试”。 </p><p> 　　20世纪初，德国驻英国大使是当时在伦敦所有大国中最受尊重的一位外交官。显然，他命中注定会承担重任，即使不当本国的总理，至少也要当外交部长。然而，在1906年，他突然辞职，不愿主持外交使团为英国国王爱德华七世举行的晚宴。这位国王是一个臭名昭著的色鬼，并且明确表示他想出席什么样的晚宴。据有关报道，这位德国大使曾说：“我不想早晨刮脸时在镜子里看到一个皮条客。”——这就是镜子测试。</p><p><img src="/assets/%E6%88%91%E7%9A%84%E4%BB%B7%E5%80%BC%E8%A7%82%E6%98%AF%E4%BB%80%E4%B9%88.png" alt="价值观" loading="lazy"></p><p>​ 我们所遵从的伦理道德要求你问自己：我每天早晨在镜子里想看到一个什么样的人？在一个组织或一种情形下合乎道德的行为，在另一个组织或另一种情形下也是合乎道德的。但是，道德只是价值体系的一部分——尤其对于一个组织的价值体系来说。  </p><p>　　<strong>如果一个组织的价值体系不为自己所接受或者与自己的价值观不相容，人们就会备感沮丧，工作效力低下。</strong>  </p><p>　　让我们来看看一位十分成功的人力资源主管的经历。这位主管所在的公司被一家大企业收购。收购之后，她得到了提升，从事的是她以前做得最出色的工作，包括为重要职位挑选人才。这位主管深信，在选人时，公司只有在排除内部的所有可能人选后才能从外部招聘人才。但是她的新公司认为应该首先从外部招聘，以吸收新鲜血液。对于这两种方式，需要说明的一点是，根据我的经验，适当的方式是两者兼顾。然而，这两种方式在根本上是互不相容的——表面上是政策不同，实质是价值观的不同。这说明在该公司人们对以下三个问题有着不同看法：组织与员工之间是怎样的关系；组织应该为员工以及员工的发展承担何种责任；一个人对企业最重要的贡献是什么。经过几年挫折，这位主管最终辞职——尽管她的经济损失很大。她的价值观和这个组织的价值观就是无法融合。  </p><p>　　同样，一家制药公司无论是通过不断的小幅改进，还是通过几次费用高昂、风险巨大的“突破”来取得出色业绩，都不是一个经济问题。这两种战略的结果可能都差不多。实质上，这是两种价值体系之间的冲突。一种价值体系认为公司的贡献是帮助医生把他们已经在做的工作锦上添花，另一种价值体系的取向是进行更多的科学发现。  </p><p>　　至于一个企业的经营是着眼于短期结果，还是注重长远发展，这同样是价值观问题。财务分析师认为，企业可两者同时兼顾。成功的企业家知道得更清楚。诚然，每一家公司都必须取得短期成果。但是在短期成果与长期增长之间的冲突中，每一家公司都将决定自己所选择的重点。从根本上说，这是一种关于企业职能与管理层责任的价值观冲突。  </p><p>　　价值观冲突并不限于商业组织。美国发展最快的一个牧师教会，其衡量工作成败的尺度是新教徒的人数。它的领导层认为，重要的是有多少新教徒入会。随后，上帝将满足他们的精神需求，或者至少会满足足够比例的新教徒的需求。另一个福音派牧师教会认为，重要的是人们的精神成长。这个教会慢慢地让那些形式上入会但精神上并没有融入教会生活的新教徒选择了离开。  </p><p>　　这同样不是一个数量问题。乍一看，第二个教会好像发展较慢。但是，它留住新教徒的比例要远高于第一个。换言之，它的发展比较稳固。这也不是一个神学问题（至少首先并不是神学问题），而是有关价值观的问题。在一次公开辩论中，一位牧师这样说：“除非你先加入教会，否则你永远找不到天国之门。”而另一位牧师反驳说：“不，除非你先有心寻找天国之门，否则你就不属于教会。” </p><p>　　<strong>组织和人一样，也有价值观。为了在组织中取得成效，个人的价值观必须与这个组织的价值观相容。两者的价值观不一定要相同，但是必须相近到足以共存。</strong>不然，这个人在组织中不仅会感到沮丧，而且做不出成绩。  </p><p>　　一个人的工作方式和他的长处很少发生冲突，相反，两者能产生互补。但是，<strong>一个人的价值观有时会与他的长处发生冲突</strong>。一个人做得好甚至可以说是相当好、相当成功的事情——可能与其价值体系不吻合。在这种情况下，这个人所做的工作似乎并不值得贡献毕生的精力（甚至没必要贡献太多的精力）。  </p><p>　　如果可以，请允许我插入一段个人的故事。多年前，我也曾不得不在自己的价值观和做得很成功的工作之间做出选择。20世纪30年代中期，我还是一个年轻人，在伦敦做投资银行业务，工作非常出色。这项工作显然能发挥我的长处。然而，我并不认为自己担任资产管理人是在做贡献。我认识到，我所重视的是对人的研究。我认为，<strong>一生忙于赚钱、死了成为墓地中的最大富翁没有任何意义</strong>。当时我没有钱，也没有任何就业前景。尽管当时大萧条仍在持续，我还是辞去了工作。这是一个正确的选择。换言之，<strong>价值观是并且应该是最终的试金石</strong>。</p><h2 id="★5、我属于何处？"><a href="#★5、我属于何处？" class="headerlink" title="★5、我属于何处？"></a>★5、我属于何处？</h2><p>​少数人很早就知道他们属于何处。比如，数学家、音乐家和厨师，通常在四五岁的时候就知道自己会成为数学家、音乐家和厨师了。物理学家通常在十几岁甚至更早的时候就决定了自己的工作生涯。但是，<strong>大多数人，尤其是很有天赋的人，至少要过了二十五六岁才知道他们将身属何处</strong>然而，到这个时候，他们应该知道上面所谈的三个问题的答案：</p><blockquote><p>1、我的长处是什么？<br>2、我的工作方式是怎样的？<br>3、我的价值观是什么？</p></blockquote><p>随后，他们就能够决定自己该向何处投入精力。或者，他们应该能够决定自己不属于何处。</p><p><img src="/assets/%E6%88%91%E5%B1%9E%E4%BA%8E%E4%BD%95%E5%A4%84.png" alt="我属于何处" loading="lazy"></p><p>​ 已经知道自己在大公司里干不好的人，应该学会拒绝在一个大公司中任职。已经知道自己不适合担任决策者的人，应该学会拒绝做决策工作。巴顿将军（他自己大概永远不知道这一点）本来应该学会拒绝担任独立总指挥的。  </p><p>　　同样重要的是，知道上述三个问题的答案，也使得一个人能够坦然接受一个机会、一个邀请或一项任务。他们会说：“是的，我将做这件事。但是，我将按照我自己的特点，采取这样的方式来做这件事，进行这样的组织安排，这样来处理当中所牵涉的关系。这是我在这个时间范围内应该会取得的成果，因为这就是我。”  </p><p>　　<strong>成功的事业不是预先规划的，而是在人们知道了自己的长处、工作方式和价值观后，准备把握机遇时水到渠成的。</strong>知道自己属于何处，可使一个勤奋、有能力但原本表现平平的普通人，变成出类拔萃的工作者。 </p><h2 id="★6、我该做什么贡献？"><a href="#★6、我该做什么贡献？" class="headerlink" title="★6、我该做什么贡献？"></a>★6、我该做什么贡献？</h2><p>​ 综观人类的发展史，绝大多数人永远都不需要提出这样一个问题：我该做出什么贡献？因为他们该做出什么贡献是由别人告知的，他们的任务或是由工作本身决定的（例如农民或工匠的任务），或是由主人决定的（例如佣人的任务）。</p><p>　　以前的人大多都处于从属地位，别人吩咐他们做什么，就做什么，这被认为是理所当然的。甚至到了20世纪50年代和60年代，那时涌现出的知识工作者（即所谓的“组织人”，organization man）还指望公司的人事部为他们做职业规划。 </p><p>　　随后，到20世纪60年代末，就再没有人想让别人来安排自己的职业生涯了。年轻的男男女女开始提出这个问题：我想做什么？而他们所听到的答案就是“你们自行其是吧”。但是，这种回答同“组织人”听命公司的做法一样错误。那些相信自行其是就能做出贡献、实现抱负、取得成功的人，一般连三点中的任何一点都做不到。</p><p>　　尽管如此，我们还是不能走回头路，让别人来吩咐、安排自己要干什么。对于知识工作者来说，他们还不得不提出一个以前从来没有提出过的问题：我的贡献应该是什么？要回答这个问题，他们必须考虑三个不同的因素：</p><blockquote><p>1、当前形势的要求是什么？<br>2、鉴于我的长处、我的工作方式以及我的价值观，我怎样才能对需要完成的任务做出最大贡献？<br>3、必须取得什么结果才能产生重要影响？</p></blockquote><p><img src="/assets/%E6%88%91%E8%AF%A5%E5%81%9A%E4%BB%80%E4%B9%88%E8%B4%A1%E7%8C%AE.png" alt="我该做什么贡献" loading="lazy"></p><p> 　　请看一位新任命的医院院长的经历。这是一所享有盛名的大医院，30年来一直就靠名气顺利经营着。新院长上任后决定了自己应做的贡献：两年内在医院的某个重要领域建立起卓越服务的标准。他决定以急诊室为重点，因为该院的急诊室地方比较大，受人注意，而又秩序混乱。他决定，到急诊室就诊的每一个患者必须在60秒钟之内由一名合格的护士接待。一年之内，该医院的急诊室变成了美国所有医院的样板，又过了两年，整个医院的面貌焕然一新。 </p><p>　　正如这个事例所表明的，<strong>把眼光放得太远是不大可能的——甚至不是特别有效。一般来说，一项计划的时间跨度如果超过了18个月，就很难做到明确和具体</strong>。因此，在多数情况下我们应该提出的问题是：</p><blockquote><p>1、我在哪些方面能取得将在今后一年半内见效的结果？<br>2、如何取得这样的结果？</p></blockquote><p>　　回答这个问题时必须对几个方面进行权衡：</p><p>　　首先，这些结果应该是比较难实现的——用当前的一个时髦词说，就是要有“张力”（stretching）。但是，这些结果也应该是能力所及的。设定一个不能实现的目标或者只能在可能性微乎其微的情况下实现的目标，根本不能叫雄心勃勃，简直就是愚蠢。 </p><p>　　其次，这些结果应该富有意义，要能够产生一定影响。 </p><p>　　最后，结果应该明显可见，如果可能的话，还应当能够衡量。确定了要实现的结果之后，接着就可以制订行动方针：做什么，从何处着手，如何开始，目标是什么，在多长时间内完成。</p><h2 id="★7、我要如何处理人际关系？"><a href="#★7、我要如何处理人际关系？" class="headerlink" title="★7、我要如何处理人际关系？"></a>★7、我要如何处理人际关系？</h2><p>　　除了少数伟大的艺术家、科学家和运动员，很少有人是靠自己单枪匹马而取得成果的。不管是组织成员还是个体职业者，大多数人都要与别人进行合作，并且是有效的合作。要实现自我管理，你需要对自己的人际关系负起责任。这包括两部分内容。  </p><p>　　首先是要接受：别人是和你一样的个体这个事实。  </p><p>　　每个人都会执意展现自己作为人的个性。这就是说，<strong>每个人都有自己的长处，自己的做事方式和自己的价值观。因此，要想卓有成效，你就必须知道共事者的长处、工作方式和价值观。</strong>这个道理听起来让人很容易明白，但是没有几个人真正会去注意。</p><p><img src="/assets/%E6%88%91%E8%A6%81%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%BA%BA%E9%99%85%E5%85%B3%E7%B3%BB.png" alt="我要如何处理人际关系" loading="lazy"></p><p> 　　一个习惯于写报告的人就是个典型的例子——他在第一份工作时就培养起写报告的习惯，因为他的老板是一个读者型的人，而即使下一个老板是个听者型，此人也会继续写着那肯定没有任何结果的报告。这位老板因此肯定会认为这个员工愚蠢、无能、懒惰，肯定干不好工作。但是，如果这个员工事先研究过新老板的情况，并分析过这位老板的工作方式，这种情况本来可以避免。  </p><p>　　老板既不是组织结构图上的一个头衔，也不是一个“职能”。他们是有个性的人，他们有权以自己最得心应手的方式来工作。与他们共事的人有责任<strong>观察他们，了解他们的工作方式，并做出相应的自我调整，以适应老板最有效的工作方式。事实上，这就是“管理”上司的秘诀。</strong>  </p><p>　　这种方法适用于所有与你共事的人。每个人都有他自己的做事方法，也有权按照自己的方式来工作，而不是按你的方法来工作。重要的是，他们能否有所作为以及他们持有什么样的价值观。至于工作方式，人各有别。提高效力的第一个秘诀是了解跟你合作和你要依赖的人，以利用他们的长处、工作方式和价值观。工作关系应当既以工作为基础，也以人为基础。  </p><p>　　人际关系责任的第二部分内容是沟通责任。  </p><p>　　在我或是其他人开始给一个组织做咨询时，我们听到的第一件事都与个性冲突有关。其中大部分冲突都是因为：人们不知道别人在做什么，他们又是采取怎样的工作方式，专注于做出什么样的贡献以及期望得到怎样的结果。而这些人不了解情况的原因是，他们没有去问，结果也就不得而知。这种不去问明情况的做法，与其说是反映了人类的愚蠢，倒不如说是历史使然。  </p><p>　　在以前，人们没必要把这些情况告诉任何人。比如在中世纪的城市，一个区的每一个人从事的行业都一样。在乡村，土地刚一解冻，山谷里的每一个人就开始播种同一种农作物。即使有少数人做的事情和大家不一样，他们也是单独工作，因此不需要告诉任何人他们在做什么。  </p><p>　　而现在，大多数人都与承担着不同任务和责任的人一道工作。市场营销副总裁可能是销售出身，知道有关销售的一切，但是，对于自己从未做过的事情，比如定价、广告、包装等等，就一无所知了。所以，那些正在做这些工作的人必须确保营销副总裁懂得他们设法做的是什么、他们为什么要做这件事、他们将如何去做以及期望取得什么结果。  </p><p>　　如果营销副总裁不懂得这些高层次的、知识型的专业人士在做什么，错主要在后者身上，而不在自己。反过来说，营销副总裁的责任则是确保他的所有同事都知道自己是怎样看待营销这项工作的：他的目标是什么、他如何工作，以及他对他本人和他的每一个同事有什么期望。  </p><p>　　即使一些人懂得负起人际关系责任的重要性，他们和同事的交流也往往不够。他们总是有所顾虑，怕别人把自己看成是一个冒昧、愚蠢、爱打听的人。他们错了。因为我们看到，每当有人找到他的同事说“这是我所擅长的工作。这是我的做事方式。这是我的价值观。这是我计划做出的贡献和应当取得的成果”，这个人总会得到如此回答：“这太有帮助了，可你为什么不早点告诉我？”  </p><p>　　如果一个人继续问道：“那么，关于你的长处、你的工作方式、你的价值观以及你计划做出的贡献，我需要知道什么？”他也会得到类似的答复——据我的经验，无一例外。事实上，知识工作者应该向与他们共事的每一个人，不管是下属、上司、同事还是团队成员，都发出这样的疑问。而且，每次提出此类问题，都会得到这样的回答：“谢谢你来问我。但是，你为什么不早点问我？”  </p><p>　　<strong>组织已不再建立在强权的基础上，而是建立在信任的基础上。人与人之间相互信任，不一定意味着他们彼此喜欢对方，而是意味着彼此了解。</strong>因此，人们绝对有必要对自己的人际关系负责。这是一种义务。不管一个人是公司的一名成员，还是公司的顾问、供应商或经销商，他都需要对他的所有共事者负起这种责任。所谓共事者，是指在工作上他所依赖的同事以及依赖他的同事。 </p><h2 id="★8、我该如何管理后半生？"><a href="#★8、我该如何管理后半生？" class="headerlink" title="★8、我该如何管理后半生？"></a>★8、我该如何管理后半生？</h2><p> 　　当多数人的工作是体力劳动时，你不必为自己的后半生担心。你只要继续从事你一直在做的工作就行了。如果你够幸运，能在工厂或铁路辛勤工作40年后撑下来，你就可以快乐地度过余生，什么也用不着干。然而，现在的多数工作都是知识工作，而知识工作者在干了40年后，仍能发挥余热，他们只是有些厌倦。  </p><p>　　我们听到了许多有关经理人中年危机的谈论，“厌倦”这个词在其中频频出现。45岁时，多数经理人的职业生涯达到了顶峰，他们也知道这一点。在做了 20年完全相同的工作之后，他们已经得心应手。但是他们学不到新东西，也没有什么新贡献，从工作中得不到挑战，因而也谈不上满足感。然而，在他们面前，还有20到25年的职业道路要走。这就是为什么经理人在进行自我管理后，越来越多地开始发展第二职业的原因。  </p><p>　　发展第二职业有三种方式：</p><p><img src="/assets/%E5%8F%91%E5%B1%95%E7%AC%AC%E4%BA%8C%E8%81%8C%E4%B8%9A%E6%9C%89%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F.png" alt="发展第二职业三种方式" loading="lazy"></p><p>　　第一种是完全投身于新工作。</p><p>　　这常常只需要从一种组织转到另一种组织。例如，一家大公司某事业部的会计师成为一家中型医院的财务总监。但是也有越来越多的人转入完全不同的职业。例如，公司经理在45岁时进入政府内阁；或者中层管理人员在公司工作20年后离职，到法学院进修，成为一个小镇的律师。还有许多人在第一份职业中取得的成功有限，于是改行从事第二职业。这样的人有很多技能，他们也知道该如何工作。而且，他们需要一个社群——因为孩子已长大单飞，剩下一座空屋。他们也需要收入。但最重要的是，他们需要挑战。</p><p>　　为后半生做准备的第二种方式是，发展一个平行的职业。</p><p>　　许多人的第一职业十分成功，他们还会继续从事原有工作，或全职或兼职，甚至只是当顾问。但是，除此之外，他们会开创一项平行的工作，通常是在非营利机构，每周占用10个小时。例如，他们可能接手教会的管理，或者担任当地女童子军顾问委员会主席。他们也可能管理受虐妇女庇护所，担任当地公共图书馆的儿童图书管理员，或在学校董事会任职等。</p><p>　　最后一种方法是社会创业。 </p><p>　　社会创业者通常是在第一职业中非常成功的人士。他们都热爱自己的工作，但是这种工作对他们已经不再有挑战性。在许多情况下，他们虽然继续做着原来的工作，但在这份工作上花的时间越来越少。他们同时开创了另一项事业，通常是非营利性活动。例如，我的朋友鲍勃·布福德创办了一个非常成功的电视公司，现在他仍然经营着。但与此同时，他还创建了一个与新教教会合作的非营利组织，也做得非常成功。现在他又创建了一个组织，专门指导社会创业者在经营原有业务的同时，如何管理自己另外创办的非营利机构。</p><p>　</p><p>​ <strong>能管理好自己后半生的人总是少数。多数人可能“一干到底”，数着年头一年一年过去，直至退休</strong>。但是，正是这些少数人，这些把漫长的工作寿命看做是自己和社会之机会的男男女女，才会成为领袖和模范。</p><p>​ <strong>管理好后半生有一个先决条件：你必须早在你进入后半生之前就开始行动</strong>。当30年前人们首次认识到工作寿命正在迅速延长时，许多观察家（包括我自己）认为，退休人员会越来越多地成为非营利机构的志愿者。可是，这种情况并没有发生。一个人如果不在40岁之前就开始做志愿者，那他60岁之后也不会去做志愿者。</p><p>　　同样，我认识的所有社会创业者，都是早在他们原有的事业达到顶峰之前就开始从事他们的第二事业。请看一名成功律师的例子。这位律师是一家大公司的法律顾问，他同时在自己所在的州开办了模特培训学校。早在他35岁左右的时候，他就开始志愿为学校提供法律咨询。40岁时被推选为一家学校的董事会成员。50岁时，他积累起了一笔财富，办起了自己的企业——建立并经营模特培训学校。然而此时，他依旧在那家他年轻时参与创建的公司里担任首席法律顾问，而且几乎是全职工作。</p><p>　　发展第二兴趣（而且是趁早发展）还有一个原因：任何人都不能指望在生活或工作中很长时间都不遭遇严重挫折。有一位很能干的工程师在45岁时错过了晋升的机会。另一位也很能干的普通学院的教授在42岁时认识到，即使她完全具备担任教授的资格，她永远也不会在一所有名的大学里获得教授职位。还有一位则是在家庭生活里出现了悲剧：婚姻破裂或者痛失子女。在这样的时刻，第二兴趣——不仅仅是业余爱好——还可能发挥重要作用。例如，这位工程师现在知道他在工作上并不十分成功。但是，在公司以外的活动中，例如负责教会资金的管理，他是成功的。一个人可能家庭破碎，但是他能在第二兴趣的活动中发现还有社区这个大“家庭”。</p><p>　　在一个崇尚成功的社会里，拥有各种选择变得越来越重要。从历史上来看，却没有“成功”一说。绝大多数人只期望坚守“适当的位置”。唯一的流动性是向下的流动性。然而，在知识社会里，我们期望每一个人都能取得成功。这显然是不可能的。对许多人来说，能避免失败就行。可是有成功的地方，就会有失败。因此，有一个能够让人们做出贡献、发挥影响力或成为“大人物”的领域，这不仅对个人十分重要，对个人的家庭也同样重要。这意味着人们需要找到一个能够有机会成为领袖、受到尊重、取得成功的第二领域——可能是第二份职业，也可能是平行的职业或社会创业。</p><p>　　自我管理中面临的挑战看上去比较明显，甚至非常基本，其答案可能不言自明，甚至近乎幼稚。但是，自我管理需要个人，尤其是知识工作者，做出以前从未做过的事情。实际上，<strong>自我管理需要每一个知识工作者在思想和行动上都要成为自己的首席执行官</strong>。更进一步来看，这样的转变——从一切听从别人吩咐的体力劳动者到不得不自我管理的知识工作者——也使得社会结构发生了深刻变化。</p><p>　　历史上每一个社会，甚至是个人主义倾向最强的社会，都认为（即使只是下意识地认为）两件事情是理所当然的：</p><blockquote><p>1、组织比员工更长寿；<br>2、大多数人从不挪地方。</p></blockquote><p>　　如今，情况恰恰相反。知识工作者的寿命超过了组织寿命，而且他们来去自如。于是，人们对自我管理的需要在人类事务中掀起了一场革命。</p>]]></content>
    
    
    <summary type="html">Managing Oneself</summary>
    
    
    
    
    <category term="转载" scheme="https://xiecang.cc/tags/%E8%BD%AC%E8%BD%BD/"/>
    
    <category term="修身" scheme="https://xiecang.cc/tags/%E4%BF%AE%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>高并发常见应对策略-缓存部分</title>
    <link href="https://xiecang.cc/high-concurrency-cache/"/>
    <id>https://xiecang.cc/high-concurrency-cache/</id>
    <published>2018-11-14T10:25:12.000Z</published>
    <updated>2022-02-07T02:54:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文讨论了缓存与数据库不一致问题，探讨了几种常见解决思路。<br>列举了分布式缓存高可用的几种解决方案，以及应对缓存穿透的常见思路。</p><span id="more"></span><h2 id="缓存与数据库不一致问题"><a href="#缓存与数据库不一致问题" class="headerlink" title="缓存与数据库不一致问题"></a>缓存与数据库不一致问题</h2><h3 id="缓存是什么，解决了什么问题"><a href="#缓存是什么，解决了什么问题" class="headerlink" title="缓存是什么，解决了什么问题"></a>缓存是什么，解决了什么问题</h3><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FjaGVfKGNvbXB1dGluZyk=">缓存介绍<i class="fa fa-external-link-alt"></i></span></p><p>一般来说，用来协调速度相差较大的两种硬件之间数据传输速度差异的结构，让数据更快的返回，都可称为缓存。</p><p>不同硬件之间读写速度差异</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Latency Comparison Numbers (~2012)</span><br><span class="line">----------------------------------</span><br><span class="line">L1 cache reference                           0.5 ns</span><br><span class="line">Branch mispredict                            5   ns</span><br><span class="line">L2 cache reference                           7   ns                      14x L1 cache</span><br><span class="line">Mutex lock/unlock                           25   ns</span><br><span class="line">Main memory reference                      100   ns                      20x L2 cache, 200x L1 cache</span><br><span class="line">Compress 1K bytes with Zippy             3,000   ns        3 us</span><br><span class="line">Send 1K bytes over 1 Gbps network       10,000   ns       10 us</span><br><span class="line">Read 4K randomly from SSD*             150,000   ns      150 us          ~1GB/sec SSD</span><br><span class="line">Read 1 MB sequentially from memory     250,000   ns      250 us</span><br><span class="line">Round trip within same datacenter      500,000   ns      500 us</span><br><span class="line">Read 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory</span><br><span class="line">Disk seek                           10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip</span><br><span class="line">Read 1 MB sequentially from disk    20,000,000   ns   20,000 us   20 ms  80x memory, 20X SSD</span><br><span class="line">Send packet CA-&gt;Netherlands-&gt;CA    150,000,000   ns  150,000 us  150 ms</span><br><span class="line"></span><br><span class="line">Notes</span><br><span class="line">-----</span><br><span class="line">1 ns = 10^-9 seconds</span><br><span class="line">1 us = 10^-6 seconds = 1,000 ns</span><br><span class="line">1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns</span><br></pre></td></tr></table></figure><h3 id="一个简单的更新操作"><a href="#一个简单的更新操作" class="headerlink" title="一个简单的更新操作"></a>一个简单的更新操作</h3><p>有一个用户表，需要把 小明（ID &#x3D; 1）的身高从 170 修改为 180。</p><p>如果更新步骤为：</p><ol><li>更新数据库</li><li>更新缓存</li></ol><p>那么，有可能会造成缓存和数据库数据不一致</p><p>比如同时两个请求 A、B<br>请求 A 希望把小明（ID &#x3D; 1）的身高从 170 修改为 180<br>请求 B 希望把小明（ID &#x3D; 1）的身高从 170 修改为 181</p><p>步骤为：</p><ol><li>请求 A 把数据库 ID &#x3D; 1 的身高修改为 180</li><li>请求 B 把数据库 ID &#x3D; 1 的身高修改为 181</li><li>请求 B 把缓存 ID &#x3D; 1 的身高修改为 181</li><li>请求 A 把缓存 ID &#x3D; 1 的身高修改为 180</li></ol><p>此时，数据库中小明身高为 181， 缓存中小明身高为 180, 缓存和数据库数据不一致</p><h3 id="旁路缓存-Cache-Aside-策略"><a href="#旁路缓存-Cache-Aside-策略" class="headerlink" title="旁路缓存 Cache Aside 策略"></a>旁路缓存 Cache Aside 策略</h3><p>解决<strong>并发情况下缓存和数据库字段一致</strong>，主要用于不经常变化的数据， “一写多读” 场景</p><p><strong>读策略的步骤是：</strong><br>从缓存中读取数据；<br>如果缓存命中，则直接返回数据；<br>如果缓存不命中，则从数据库中查询数据；<br>查询到数据后，将数据写入到缓存中，并且返回给用户。</p><p><strong>写策略的步骤是：</strong><br>更新数据库中的记录；<br>删除缓存记录。</p><h4 id="可否调换写策略步骤顺序"><a href="#可否调换写策略步骤顺序" class="headerlink" title="可否调换写策略步骤顺序"></a>可否调换写策略步骤顺序</h4><p>不可，假设：<br>请求 A 希望把小明（ID &#x3D; 1）的身高从 170 修改为 180<br>请求 B 希望查询小明（ID &#x3D; 1）的身高</p><p>操作顺序是：</p><ol><li>请求 A 删除缓存</li><li>请求 B 查询缓存，未命中</li><li>请求 B 查询数据库，得到身高 170</li><li>请求 B 写入缓存，缓存中小明身高 170</li><li>请求 A 更新数据库，数据库中小明身高 180</li></ol><p>此时，又造成缓存和数据库的不一致。</p><h4 id="先更新，后删除，就万无一失了吗？"><a href="#先更新，后删除，就万无一失了吗？" class="headerlink" title="先更新，后删除，就万无一失了吗？"></a>先更新，后删除，就万无一失了吗？</h4><p>并没有，有一种概率较小的情况<br>请求 A 希望把小明（ID &#x3D; 1）的身高从 170 修改为 180<br>请求 B 希望查询小明（ID &#x3D; 1）的身高</p><p>操作顺序是：</p><ol><li>请求 B 查询缓存，未命中</li><li>请求 B 查询数据库，得到身高 170</li><li>请求 A 更新数据库，数据库中小明身高 180</li><li>请求 A 删除缓存</li><li>请求 B 写入缓存，缓存中小明身高 170</li></ol><p>概率小是因为，一般缓存的写入速度，是快于数据库写入的，所以，在做完 3、4 才完成 5 的概率很小。</p><h4 id="更多优化思路"><a href="#更多优化思路" class="headerlink" title="更多优化思路"></a>更多优化思路</h4><p>Cache Aside 存在的最大的问题是当写入比较频繁时，缓存中的数据会被频繁地清理，这样会对缓存的命中率有一些影响。<br><strong>如果业务对缓存命中率有严格的要求，那么可以考虑两种解决方案：</strong></p><ol><li>使用分布式锁，在更新数据时也更新缓存。因为这样在同一时间只允许一个线程更新缓存，就不会产生并发问题了。当然这么做对于写入的性能会有一些影响；</li><li>另一种做法同样也是在更新数据时更新缓存，只是给缓存加一个较短的过期时间，这样即使出现缓存不一致的情况，缓存的数据也会很快地过期，对业务的影响也是可以接受。</li></ol><h3 id="Write-Through、Read-Through-及-Write-Back-策略"><a href="#Write-Through、Read-Through-及-Write-Back-策略" class="headerlink" title="Write Through、Read Through 及 Write Back 策略"></a>Write Through、Read Through 及 Write Back 策略</h3><p>Write Through（写穿） 的策略是这样的：先查询要写入的数据在缓存中是否已经存在，如果已经存在，则更新缓存中的数据，并且由缓存组件同步更新到数据库中，如果缓存中数据不存在，我们把这种情况叫做 “Write Miss（写失效）”。</p><p>Read Through（读穿） 策略就步骤是这样的：先查询缓存中数据是否存在，如果存在则直接返回，如果不存在，则由缓存组件负责从数据库中同步加载数据。</p><p>Write Back（写回）策略<br>这个策略的核心思想是在写入数据时只写入缓存，并且把缓存块儿标记为 “脏” 的。而脏块儿只有被再次使用时才会将其中的数据写入到后端存储中。</p><p><img src="/../assets/high-concurrency/wirte-back.png" alt="write back 写策略示意图" loading="lazy"></p><p><img src="/../assets/high-concurrency/write-back-read.png" alt="writ back 读策略示意图" loading="lazy"></p><p>操作系统中往磁盘中写数据时采用的就是这种策略。应用场景有 Page Cache，还是日志的异步刷盘、消息队列中消息的异步写入磁盘等。</p><h2 id="分布式缓存的高可用方案"><a href="#分布式缓存的高可用方案" class="headerlink" title="分布式缓存的高可用方案"></a>分布式缓存的高可用方案</h2><p><strong>客户端方案</strong>就是在客户端配置多个缓存的节点，通过缓存写入和读取算法策略来实现分布式，从而提高缓存的可用性。<br><strong>中间代理层方案</strong>是在应用代码和缓存节点之间增加代理层，客户端所有的写入和读取的请求都通过代理层，而代理层中会内置高可用策略，帮助提升缓存系统的高可用<br><strong>服务端方案</strong>就是 Redis 2.4 版本后提出的 Redis Sentinel 方案。</p><h3 id="客户端方案"><a href="#客户端方案" class="headerlink" title="客户端方案"></a>客户端方案</h3><h4 id="缓存数据如何分片"><a href="#缓存数据如何分片" class="headerlink" title="缓存数据如何分片"></a>缓存数据如何分片</h4><p>单一的缓存节点受到机器内存、网卡带宽和单节点请求量的限制，不能承担比较高的并发<br>可以将数据分片，依照分片算法将数据打散到多个不同的节点上，每个节点上存储部分数据。<br>同时也可以在某个节点故障的情况下，其他节点也可以提供服务，保证了一定的可用性。</p><p>一般来讲，分片算法常见的就是 <strong>Hash 分片算法</strong>和<strong>一致性 Hash 分片算法</strong>两种。</p><h4 id="Hash-分片算法"><a href="#Hash-分片算法" class="headerlink" title="Hash 分片算法"></a>Hash 分片算法</h4><p>Hash 分片的算法就是对缓存的 Key 做哈希计算，然后对总的缓存节点个数取余<br>优点：简单易理解<br>缺点：当增加或者减少缓存节点时，缓存总的节点个数变化造成计算出来的节点发生变化，从而造成缓存失效不可用<br>建议：如果采用这种方法，最好建立在对于这组缓存命中率下降不敏感的情况下，比如下面还有另外一层缓存来兜底。</p><h4 id="一致性-Hash-分片算法"><a href="#一致性-Hash-分片算法" class="headerlink" title="一致性 Hash 分片算法"></a>一致性 Hash 分片算法</h4><p>一致性 Hash 算法可以很好地解决增加和删减节点时，命中率下降的问题</p><p>将整个 Hash 值空间组织成一个虚拟的圆环，然后将缓存节点的 IP 地址或者主机名做 Hash 取值后，放置在这个圆环上。<br>当需要确定某一个 Key 需要存取到哪个节点上的时候，先对这个 Key 做同样的 Hash 取值，<br>确定在环上的位置，然后按照顺时针方向在环上 “行走”，遇到的第一个缓存节点就是要访问的节点。</p><p>比方说下面这张图里面，Key1 和 Key2 会落入到 Node1 中，Key3、Key4 会落入到 Node2 中，Key5 落入到 Node3 中，Key6 落入到 Node4 中。<br><img src="/../assets/high-concurrency/%E4%B8%80%E8%87%B4%E6%80%A7hash.png" alt="一致性 hash 示意图" loading="lazy"></p><p>这时如果在 Node1 和 Node2 之间增加一个 Node5，原本命中 Node 的 Key3 现在命中到 Node5，而其它的 Key 都没有变化；</p><p><img src="/../assets/high-concurrency/%E4%B8%80%E8%87%B4%E6%80%A7hash%E5%A2%9E%E5%88%A0%E8%8A%82%E7%82%B9.png" alt="一致性 hash 算法增加和删除节点时缓存节点的变化" loading="lazy"></p><p>优点： <strong>在增加和删除节点时，只有少量的 Key 会 “漂移” 到其它节点上</strong>，而大部分的 Key 命中的节点还是会保持不变，从而可以保证命中率不会大幅下降。<br>缺点：</p><ol><li><p>缓存节点在圆环上分布不平均，会造成部分缓存节点的压力较大；当某个节点故障时，这个节点所要承担的所有访问都会被顺移到另一个节点上，会对后面这个节点造成压力。 （解决方法，引入虚拟节点的概念）</p></li><li><p>一致性 Hash 算法的脏数据问题。</p><ul><li><p>产生原因： 集群中有两个节点 A、B，客户端在 写入 key 计算后需要更新到 A 节点，值为 3，<br>更新成功后 A 节点和客户端连接出现问题，下一次更新到了 B 节点，值为 4，<br>客户端和 A 节点重连，获取 key 值时，得到的是 A 节点的结果 3，出现脏数据</p></li><li><p>解决方法：<strong>设置缓存的过期时间</strong>，这样当发生漂移时，之前存储的脏数据可能已经过期，就可以减少存在脏数据的几率。</p></li></ul></li></ol><h3 id="中间代理层方案"><a href="#中间代理层方案" class="headerlink" title="中间代理层方案"></a>中间代理层方案</h3><p>客户端方案中，只能在单一语言中复用代码（如使用java实现后，python 项目无法直接使用），中间代理层方案主要解决了这个问题</p><p>自己实现 or 第三方 Facebook 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL21jcm91dGVy">Mcrouter<i class="fa fa-external-link-alt"></i></span>，Twitter 的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R3aXR0ZXIvdHdlbXByb3h5">Twemproxy<i class="fa fa-external-link-alt"></i></span>，豌豆荚的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NvZGlzTGFicy9jb2Rpcw==">Codis<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="服务端方案"><a href="#服务端方案" class="headerlink" title="服务端方案"></a>服务端方案</h3><p>Redis 在 2.4 版本中提出了 Redis Sentinel（哨兵）模式来解决主从 Redis 部署时的高可用问题，它可以在主节点挂了以后自动将从节点提升为主节点。</p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>从缓存中没有查到数据，而不得不从后端系统（比如数据库）中查询的情况。</p><p>少量的缓存穿透不可避免，对系统也是没有损害的，一般来说，互联网数据访问也遵循二八法则，最重要的事物通常只占 20%（热点数据），而剩余的 80% 的事物确实不重要的。</p><p>如果大量的穿透请求超过了后端系统的承受范围，会造成后端系统的崩溃。接下来，将探讨如何规避这种大量缓存穿透问题。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>场景：使用前文「旁路缓存 Cache Aside 策略」</p><ol><li>读缓存，未命中</li><li>查数据库，未查到</li><li>不会向缓存中写入值，返回</li><li>再次请求，进入步骤 1</li></ol><h4 id="回种空值"><a href="#回种空值" class="headerlink" title="回种空值"></a>回种空值</h4><p>方案： 在步骤 3 中把空值写入缓存，设置较短的超时时间</p><p>缺点：但如果有大量未命中的请求，缓存内就会有有大量的空值缓存，也就会浪费缓存的存储空间，如果缓存被占满，还会「挤掉」正常的缓存，导致命中率下降。<br><strong>使用的时候应该评估一下缓存容量是否能够支撑</strong></p><h4 id="使用布隆过滤器"><a href="#使用布隆过滤器" class="headerlink" title="使用布隆过滤器"></a>使用布隆过滤器</h4><p>布隆过滤器基本思路如下：</p><ol><li>把集合中的每一个值按照提供的 Hash 算法算出对应的 Hash 值</li><li>将 Hash 值对数组长度取模后得到需要计入数组的索引值，并且将数组这个位置的值从 0 改成 1</li><li>判断一个元素是否存在于这个集合中时，将这个元素按照相同的算法计算出索引值</li><li>如果这个位置的值为 1 就认为这个元素在集合中，否则则认为不在集合中</li></ol><p>使用方法：</p><ol><li>新写入的数据，写入数据库，并依照同样的算法更新布隆过滤器的数组中，相应位置的值。</li><li>查询时，先查询在布隆过滤器中是否存在，如果不存在就直接返回空值</li></ol><p>优点：<br>布隆过滤器性能很好，无论是写入操作还是读取操作，时间复杂度都是 O(1)</p><p>缺点：</p><ol><li>在判断元素是否在集合中时是有一定错误几率的，比如它会把不是集合中的元素判断为处在集合中；</li><li>不支持删除元素。</li></ol><p>第一个缺点主要是 hash 算法的问题，存在一定碰撞几率。<br>但是一旦布隆过滤器判断这个元素不在集合中时，它一定不在集合中。这一点非常适合解决缓存穿透的问题。<br>一个解决方案： 使用多个 Hash 算法为元素计算出多个 Hash 值，只有所有 Hash 值对应的数组中的值都为 1 时，才会认为这个元素在集合中。</p><p>布隆过滤器不支持删除元素的缺陷也和 Hash 碰撞有关。<br>比如，两个元素 A 和 B 都是集合中的元素，它们有相同的 Hash 值，如果删除 A，把数组的相应位置从 1 变成 0，那么在判断 B 的时候发现值是 0，也会判断 B 是不在集合中的元素，就会得到错误的结论。<br>解决方案： 数组中不再只有 0 和 1 两个值，而是存储一个计数。比如如果 A 和 B 同时命中了一个数组的索引，那么这个位置的值就是 2，如果 A 被删除了就把这个值从 2 改为 1。这个方案中的数组不再存储 bit 位，而是存储数值，也就会增加空间的消耗。 （根据业务场景灵活选择）</p><h3 id="其它场景"><a href="#其它场景" class="headerlink" title="其它场景"></a>其它场景</h3><p>回种空值和布隆过滤器是解决缓存穿透问题的两种最主要的解决方案，但是它们也有各自的适用场景，并不能解决所有问题。</p><p>比如当有一个极热点的缓存项，它一旦失效会有大量请求穿透到数据库，这会对数据库造成瞬时极大的压力，我们把这个场景叫做 “dog-pile effect”（狗桩效应），</p><p>这是典型的缓存并发穿透的问题，那么，我们如何来解决这个问题呢？解决狗桩效应的思路是尽量地减少缓存穿透后的并发，方案也比较简单：</p><ol><li><p>在代码中，控制在某一个热点缓存项失效之后启动一个后台线程，穿透到数据库，将数据加载到缓存中，在缓存未加载之前，所有访问这个缓存的请求都不再穿透而直接返回。</p></li><li><p>通过在 Memcached 或者 Redis 中设置分布式锁，只有获取到锁的请求才能够穿透到数据库。</p></li></ol><h2 id="静态资源加速"><a href="#静态资源加速" class="headerlink" title="静态资源加速"></a>静态资源加速</h2><p>使用 CDN。<br>静态资源访问的关键点是就近访问，即北京用户访问北京的数据，杭州用户访问杭州的数据，这样才可以达到性能的最优。<br>CDN 就是将静态的资源分发到，位于多个地理位置机房中的服务器上。</p><ol><li><p>第三方厂商的 CDN 厂商会给我们一个 CDN 的节点 IP，为防止更换 CDN 厂商造成的 IP 变动，使用 DNS 来解决域名映射问题。</p></li><li><p>因为域名解析过程是分级的，每一级有专门的域名服务器承担解析的职责，所以，域名的解析过程有可能需要跨越公网做多次 DNS 查询，在性能上是比较差的。<br> 解决思路： 启动时，对需要解析的域名做预先解析，然后把解析的结果缓存到本地的一个 LRU 缓存里面。</p></li><li><p>GSLB 可以给用户返回一个离着他更近的节点，加快静态资源的访问速度。</p></li></ol><p>完结，撒花。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文讨论了缓存与数据库不一致问题，探讨了几种常见解决思路。&lt;br&gt;列举了分布式缓存高可用的几种解决方案，以及应对缓存穿透的常见思路。&lt;/p&gt;</summary>
    
    
    
    
    <category term="高并发" scheme="https://xiecang.cc/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
    <category term="缓存" scheme="https://xiecang.cc/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Rime 输入法多终端同步</title>
    <link href="https://xiecang.cc/rime-synchronization/"/>
    <id>https://xiecang.cc/rime-synchronization/</id>
    <published>2018-06-20T11:15:15.000Z</published>
    <updated>2021-12-21T03:07:14.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>准备一个同步盘或任意网盘、私有云新建一个目录用来做数据同步<br> 比如我这里选用 Dropbox 作为同步盘， 路径使用<br> <code>/home/xxx/Dropbox/Apps/rime_sync/</code></li><li>打开 Rime 输入法配置文件所在路径</li><li>分别修改配置两个设备上的 installation.yaml 文件<br> 默认都有 installation_id 字段 需要新增 sync_dir 字段并填上第一步新建的路径 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">distribution_code_name:</span> <span class="string">&quot;fcitx-rime&quot;</span></span><br><span class="line"><span class="attr">distribution_name:</span> <span class="string">Rime</span></span><br><span class="line"><span class="attr">installation_id:</span> <span class="string">&quot;linuxpc&quot;</span></span><br><span class="line"><span class="attr">sync_dir:</span> <span class="string">&quot;/home/xxx/Dropbox/Apps/rime_sync&quot;</span></span><br></pre></td></tr></table></figure></li><li>点击Rime图标上的 Synchronize 按钮，即可看到在 sync_dir 里已有同步文件</li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html"></summary>
        
      
    
    
    
    
    <category term="Rime" scheme="https://xiecang.cc/tags/Rime/"/>
    
    <category term="sync" scheme="https://xiecang.cc/tags/sync/"/>
    
  </entry>
  
  <entry>
    <title>Rclone 挂载 OneDrive</title>
    <link href="https://xiecang.cc/rclone-mount-onedrive/"/>
    <id>https://xiecang.cc/rclone-mount-onedrive/</id>
    <published>2018-05-20T12:06:08.000Z</published>
    <updated>2021-12-21T03:07:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="挂载家庭版"><a href="#挂载家庭版" class="headerlink" title="挂载家庭版"></a>挂载家庭版</h2><p>要点：Choose national cloud region for OneDrive. 时候 office 365 家庭版 选 <strong>1</strong> ！！</p><p>参考： <span class="exturl" data-url="aHR0cHM6Ly9yY2xvbmUub3JnL29uZWRyaXZlLw==">https://rclone.org/onedrive/<i class="fa fa-external-link-alt"></i></span></p><details><summary>命令</summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ rclone config</span><br><span class="line">No remotes found - make a new one</span><br><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n/s/q&gt; n  <span class="comment"># 选 n</span></span><br><span class="line">name&gt; OneDriveXC  <span class="comment"># 随便起名</span></span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ <span class="string">&quot;fichier&quot;</span></span><br><span class="line"> 2 / Alias <span class="keyword">for</span> an existing remote</span><br><span class="line">   \ <span class="string">&quot;alias&quot;</span></span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ <span class="string">&quot;amazon cloud drive&quot;</span></span><br><span class="line"> 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS</span><br><span class="line">   \ <span class="string">&quot;s3&quot;</span></span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ <span class="string">&quot;b2&quot;</span></span><br><span class="line"> 6 / Box</span><br><span class="line">   \ <span class="string">&quot;box&quot;</span></span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ <span class="string">&quot;cache&quot;</span></span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ <span class="string">&quot;sharefile&quot;</span></span><br><span class="line"> 9 / Compress a remote</span><br><span class="line">   \ <span class="string">&quot;compress&quot;</span></span><br><span class="line">10 / Dropbox</span><br><span class="line">   \ <span class="string">&quot;dropbox&quot;</span></span><br><span class="line">11 / Encrypt/Decrypt a remote</span><br><span class="line">   \ <span class="string">&quot;crypt&quot;</span></span><br><span class="line">12 / Enterprise File Fabric</span><br><span class="line">   \ <span class="string">&quot;filefabric&quot;</span></span><br><span class="line">13 / FTP Connection</span><br><span class="line">   \ <span class="string">&quot;ftp&quot;</span></span><br><span class="line">14 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ <span class="string">&quot;google cloud storage&quot;</span></span><br><span class="line">15 / Google Drive</span><br><span class="line">   \ <span class="string">&quot;drive&quot;</span></span><br><span class="line">16 / Google Photos</span><br><span class="line">   \ <span class="string">&quot;google photos&quot;</span></span><br><span class="line">17 / Hadoop distributed file system</span><br><span class="line">   \ <span class="string">&quot;hdfs&quot;</span></span><br><span class="line">18 / Hubic</span><br><span class="line">   \ <span class="string">&quot;hubic&quot;</span></span><br><span class="line">19 / In memory object storage system.</span><br><span class="line">   \ <span class="string">&quot;memory&quot;</span></span><br><span class="line">20 / Jottacloud</span><br><span class="line">   \ <span class="string">&quot;jottacloud&quot;</span></span><br><span class="line">21 / Koofr</span><br><span class="line">   \ <span class="string">&quot;koofr&quot;</span></span><br><span class="line">22 / Local Disk</span><br><span class="line">   \ <span class="string">&quot;local&quot;</span></span><br><span class="line">23 / Mail.ru Cloud</span><br><span class="line">   \ <span class="string">&quot;mailru&quot;</span></span><br><span class="line">24 / Mega</span><br><span class="line">   \ <span class="string">&quot;mega&quot;</span></span><br><span class="line">25 / Microsoft Azure Blob Storage</span><br><span class="line">   \ <span class="string">&quot;azureblob&quot;</span></span><br><span class="line">26 / Microsoft OneDrive</span><br><span class="line">   \ <span class="string">&quot;onedrive&quot;</span></span><br><span class="line">27 / OpenDrive</span><br><span class="line">   \ <span class="string">&quot;opendrive&quot;</span></span><br><span class="line">28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ <span class="string">&quot;swift&quot;</span></span><br><span class="line">29 / Pcloud</span><br><span class="line">   \ <span class="string">&quot;pcloud&quot;</span></span><br><span class="line">30 / Put.io</span><br><span class="line">   \ <span class="string">&quot;putio&quot;</span></span><br><span class="line">31 / QingCloud Object Storage</span><br><span class="line">   \ <span class="string">&quot;qingstor&quot;</span></span><br><span class="line">32 / SSH/SFTP Connection</span><br><span class="line">   \ <span class="string">&quot;sftp&quot;</span></span><br><span class="line">33 / Sugarsync</span><br><span class="line">   \ <span class="string">&quot;sugarsync&quot;</span></span><br><span class="line">34 / Tardigrade Decentralized Cloud Storage</span><br><span class="line">   \ <span class="string">&quot;tardigrade&quot;</span></span><br><span class="line">35 / Transparently chunk/split large files</span><br><span class="line">   \ <span class="string">&quot;chunker&quot;</span></span><br><span class="line">36 / Union merges the contents of several upstream fs</span><br><span class="line">   \ <span class="string">&quot;union&quot;</span></span><br><span class="line">37 / Webdav</span><br><span class="line">   \ <span class="string">&quot;webdav&quot;</span></span><br><span class="line">38 / Yandex Disk</span><br><span class="line">   \ <span class="string">&quot;yandex&quot;</span></span><br><span class="line">39 / Zoho</span><br><span class="line">   \ <span class="string">&quot;zoho&quot;</span></span><br><span class="line">40 / http Connection</span><br><span class="line">   \ <span class="string">&quot;http&quot;</span></span><br><span class="line">41 / premiumize.me</span><br><span class="line">   \ <span class="string">&quot;premiumizeme&quot;</span></span><br><span class="line">42 / seafile</span><br><span class="line">   \ <span class="string">&quot;seafile&quot;</span></span><br><span class="line">Storage&gt; 26 <span class="comment"># 选 onedrive 编号</span></span><br><span class="line">** See <span class="built_in">help</span> <span class="keyword">for</span> onedrive backend at: https://rclone.org/onedrive/ **</span><br><span class="line"></span><br><span class="line">OAuth Client Id</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">client_id&gt; </span><br><span class="line">OAuth Client Secret</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">client_secret&gt; </span><br><span class="line">Choose national cloud region <span class="keyword">for</span> OneDrive.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;global&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / Microsoft Cloud Global</span><br><span class="line">   \ <span class="string">&quot;global&quot;</span></span><br><span class="line"> 2 / Microsoft Cloud <span class="keyword">for</span> US Government</span><br><span class="line">   \ <span class="string">&quot;us&quot;</span></span><br><span class="line"> 3 / Microsoft Cloud Germany</span><br><span class="line">   \ <span class="string">&quot;de&quot;</span></span><br><span class="line"> 4 / Azure and Office 365 operated by 21Vianet <span class="keyword">in</span> China</span><br><span class="line">   \ <span class="string">&quot;cn&quot;</span></span><br><span class="line">region&gt; 1  <span class="comment"># office 365 家庭版 选 1 ！！</span></span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt;  <span class="comment"># 默认选 n 可回车不填</span></span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y <span class="keyword">if</span> not sure</span><br><span class="line"> * Say N <span class="keyword">if</span> you are working on a remote or headless machine</span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line">y/n&gt;  <span class="comment"># 默认选 Yes 可回车不填, 打开浏览器，按照提示来</span></span><br><span class="line">If your browser doesn<span class="string">&#x27;t open automatically go to the following link: http://127.0.0.1:53682/auth?state=29MhLhoy7qmec56Ys7G3zA</span></span><br><span class="line"><span class="string">Log in and authorize rclone for access</span></span><br><span class="line"><span class="string">Waiting for code...</span></span><br><span class="line"><span class="string">Got code</span></span><br><span class="line"><span class="string">Choose a number from below, or type in an existing value</span></span><br><span class="line"><span class="string"> 1 / OneDrive Personal or Business</span></span><br><span class="line"><span class="string">   \ &quot;onedrive&quot;</span></span><br><span class="line"><span class="string"> 2 / Root Sharepoint site</span></span><br><span class="line"><span class="string">   \ &quot;sharepoint&quot;</span></span><br><span class="line"><span class="string"> 3 / Sharepoint site name or URL (e.g. mysite or https://contoso.sharepoint.com/sites/mysite)</span></span><br><span class="line"><span class="string">   \ &quot;url&quot;</span></span><br><span class="line"><span class="string"> 4 / Search for a Sharepoint site</span></span><br><span class="line"><span class="string">   \ &quot;search&quot;</span></span><br><span class="line"><span class="string"> 5 / Type in driveID (advanced)</span></span><br><span class="line"><span class="string">   \ &quot;driveid&quot;</span></span><br><span class="line"><span class="string"> 6 / Type in SiteID (advanced)</span></span><br><span class="line"><span class="string">   \ &quot;siteid&quot;</span></span><br><span class="line"><span class="string"> 7 / Sharepoint server-relative path (advanced, e.g. /teams/hr)</span></span><br><span class="line"><span class="string">   \ &quot;path&quot;</span></span><br><span class="line"><span class="string">Your choice&gt; 1 # 选 1</span></span><br><span class="line"><span class="string">Found 1 drives, please select the one you want to use:</span></span><br><span class="line"><span class="string">0:  (personal) id=xxx</span></span><br><span class="line"><span class="string">Chose drive to use:&gt; 0  # 选 0</span></span><br><span class="line"><span class="string">Found drive &#x27;</span>root<span class="string">&#x27; of type &#x27;</span>personal<span class="string">&#x27;, URL: https://onedrive.live.com/?cid=05e616a666f633eb</span></span><br><span class="line"><span class="string">Is that okay?</span></span><br><span class="line"><span class="string">y) Yes (default)</span></span><br><span class="line"><span class="string">n) No</span></span><br><span class="line"><span class="string">y/n&gt; y   0  # 选 y 或者 回车</span></span><br><span class="line"><span class="string">--------------------</span></span><br><span class="line"><span class="string">[OneDriveXC]</span></span><br><span class="line"><span class="string">type = onedrive</span></span><br><span class="line"><span class="string">region = global</span></span><br><span class="line"><span class="string">token = &#123;&quot;access_token&quot;:&quot;xxx&quot;,&quot;token_type&quot;:&quot;xxx&quot;,&quot;refresh_token&quot;:xxx&quot;,&quot;expiry&quot;:&quot;xxx&quot;&#125;</span></span><br><span class="line"><span class="string">drive_id = xxx</span></span><br><span class="line"><span class="string">drive_type = personal</span></span><br><span class="line"><span class="string">--------------------</span></span><br><span class="line"><span class="string">y) Yes this is OK (default)</span></span><br><span class="line"><span class="string">e) Edit this remote</span></span><br><span class="line"><span class="string">d) Delete this remote</span></span><br><span class="line"><span class="string">y/e/d&gt; y</span></span><br><span class="line"><span class="string">Current remotes:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Name                 Type</span></span><br><span class="line"><span class="string">====                 ====</span></span><br><span class="line"><span class="string">OneDriveXC           onedrive</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">e) Edit existing remote</span></span><br><span class="line"><span class="string">n) New remote</span></span><br><span class="line"><span class="string">d) Delete remote</span></span><br><span class="line"><span class="string">r) Rename remote</span></span><br><span class="line"><span class="string">c) Copy remote</span></span><br><span class="line"><span class="string">s) Set configuration password</span></span><br><span class="line"><span class="string">q) Quit config</span></span><br><span class="line"><span class="string">e/n/d/r/c/s/q&gt; q</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></details><h2 id="挂载教育版"><a href="#挂载教育版" class="headerlink" title="挂载教育版"></a>挂载教育版</h2><p>要点：wav 方式挂载</p><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9yY2xvbmUub3JnL3dlYmRhdi8=">https://rclone.org/webdav/<i class="fa fa-external-link-alt"></i></span> </p><details><summary>命令</summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ rclone config</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">xxxxxxxxxx           onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt; n <span class="comment"># 选 n</span></span><br><span class="line">name&gt; xxxx <span class="comment"># 随便起</span></span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ <span class="string">&quot;fichier&quot;</span></span><br><span class="line"> 2 / Alias <span class="keyword">for</span> an existing remote</span><br><span class="line">   \ <span class="string">&quot;alias&quot;</span></span><br><span class="line"> 3 / Amazon Drive</span><br><span class="line">   \ <span class="string">&quot;amazon cloud drive&quot;</span></span><br><span class="line"> 4 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, and Tencent COS</span><br><span class="line">   \ <span class="string">&quot;s3&quot;</span></span><br><span class="line"> 5 / Backblaze B2</span><br><span class="line">   \ <span class="string">&quot;b2&quot;</span></span><br><span class="line"> 6 / Box</span><br><span class="line">   \ <span class="string">&quot;box&quot;</span></span><br><span class="line"> 7 / Cache a remote</span><br><span class="line">   \ <span class="string">&quot;cache&quot;</span></span><br><span class="line"> 8 / Citrix Sharefile</span><br><span class="line">   \ <span class="string">&quot;sharefile&quot;</span></span><br><span class="line"> 9 / Compress a remote</span><br><span class="line">   \ <span class="string">&quot;compress&quot;</span></span><br><span class="line">10 / Dropbox</span><br><span class="line">   \ <span class="string">&quot;dropbox&quot;</span></span><br><span class="line">11 / Encrypt/Decrypt a remote</span><br><span class="line">   \ <span class="string">&quot;crypt&quot;</span></span><br><span class="line">12 / Enterprise File Fabric</span><br><span class="line">   \ <span class="string">&quot;filefabric&quot;</span></span><br><span class="line">13 / FTP Connection</span><br><span class="line">   \ <span class="string">&quot;ftp&quot;</span></span><br><span class="line">14 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ <span class="string">&quot;google cloud storage&quot;</span></span><br><span class="line">15 / Google Drive</span><br><span class="line">   \ <span class="string">&quot;drive&quot;</span></span><br><span class="line">16 / Google Photos</span><br><span class="line">   \ <span class="string">&quot;google photos&quot;</span></span><br><span class="line">17 / Hadoop distributed file system</span><br><span class="line">   \ <span class="string">&quot;hdfs&quot;</span></span><br><span class="line">18 / Hubic</span><br><span class="line">   \ <span class="string">&quot;hubic&quot;</span></span><br><span class="line">19 / In memory object storage system.</span><br><span class="line">   \ <span class="string">&quot;memory&quot;</span></span><br><span class="line">20 / Jottacloud</span><br><span class="line">   \ <span class="string">&quot;jottacloud&quot;</span></span><br><span class="line">21 / Koofr</span><br><span class="line">   \ <span class="string">&quot;koofr&quot;</span></span><br><span class="line">22 / Local Disk</span><br><span class="line">   \ <span class="string">&quot;local&quot;</span></span><br><span class="line">23 / Mail.ru Cloud</span><br><span class="line">   \ <span class="string">&quot;mailru&quot;</span></span><br><span class="line">24 / Mega</span><br><span class="line">   \ <span class="string">&quot;mega&quot;</span></span><br><span class="line">25 / Microsoft Azure Blob Storage</span><br><span class="line">   \ <span class="string">&quot;azureblob&quot;</span></span><br><span class="line">26 / Microsoft OneDrive</span><br><span class="line">   \ <span class="string">&quot;onedrive&quot;</span></span><br><span class="line">27 / OpenDrive</span><br><span class="line">   \ <span class="string">&quot;opendrive&quot;</span></span><br><span class="line">28 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ <span class="string">&quot;swift&quot;</span></span><br><span class="line">29 / Pcloud</span><br><span class="line">   \ <span class="string">&quot;pcloud&quot;</span></span><br><span class="line">30 / Put.io</span><br><span class="line">   \ <span class="string">&quot;putio&quot;</span></span><br><span class="line">31 / QingCloud Object Storage</span><br><span class="line">   \ <span class="string">&quot;qingstor&quot;</span></span><br><span class="line">32 / SSH/SFTP Connection</span><br><span class="line">   \ <span class="string">&quot;sftp&quot;</span></span><br><span class="line">33 / Sugarsync</span><br><span class="line">   \ <span class="string">&quot;sugarsync&quot;</span></span><br><span class="line">34 / Tardigrade Decentralized Cloud Storage</span><br><span class="line">   \ <span class="string">&quot;tardigrade&quot;</span></span><br><span class="line">35 / Transparently chunk/split large files</span><br><span class="line">   \ <span class="string">&quot;chunker&quot;</span></span><br><span class="line">36 / Union merges the contents of several upstream fs</span><br><span class="line">   \ <span class="string">&quot;union&quot;</span></span><br><span class="line">37 / Webdav</span><br><span class="line">   \ <span class="string">&quot;webdav&quot;</span></span><br><span class="line">38 / Yandex Disk</span><br><span class="line">   \ <span class="string">&quot;yandex&quot;</span></span><br><span class="line">39 / Zoho</span><br><span class="line">   \ <span class="string">&quot;zoho&quot;</span></span><br><span class="line">40 / http Connection</span><br><span class="line">   \ <span class="string">&quot;http&quot;</span></span><br><span class="line">41 / premiumize.me</span><br><span class="line">   \ <span class="string">&quot;premiumizeme&quot;</span></span><br><span class="line">42 / seafile</span><br><span class="line">   \ <span class="string">&quot;seafile&quot;</span></span><br><span class="line">Storage&gt; 37  <span class="comment"># 选 wabdav 编号</span></span><br><span class="line">** See <span class="built_in">help</span> <span class="keyword">for</span> webdav backend at: https://rclone.org/webdav/ **</span><br><span class="line"></span><br><span class="line">URL of http host to connect to</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / Connect to example.com</span><br><span class="line">   \ <span class="string">&quot;https://example.com&quot;</span></span><br><span class="line"><span class="comment"># 这个你可以直接通过登录 Onedrive，然后地址栏就会出现这样的地址：</span></span><br><span class="line"><span class="comment"># https://[YOUR-DOMAIN]-my.sharepoint.com/personal/[YOUR-EMAIL]/_layouts/15/onedrive.aspx</span></span><br><span class="line"><span class="comment"># 其中 [YOUR-DOMAIN]、[YOUR-EMAIL] 是任意的，和你的学校以及邮箱有关，然后将上面的地址改写成：</span></span><br><span class="line"><span class="comment"># https://[YOUR-DOMAIN]-my.sharepoint.com/personal/[YOUR-EMAIL]/Rclone</span></span><br><span class="line"><span class="comment"># 这样的形式，其中 [YOUR-DOMAIN]、[YOUR-EMAIL] 就是前面地址中的域和 email。Documents 是 Onedrive 的一个目录，但我后来发现挂载的时候还是整盘挂载。</span></span><br><span class="line">url&gt; https://[YOUR-DOMAIN]-my.sharepoint.com/personal/[YOUR-EMAIL]/Rclone</span><br><span class="line">Name of the Webdav site/service/software you are using</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">Choose a number from below, or <span class="built_in">type</span> <span class="keyword">in</span> your own value</span><br><span class="line"> 1 / Nextcloud</span><br><span class="line">   \ <span class="string">&quot;nextcloud&quot;</span></span><br><span class="line"> 2 / Owncloud</span><br><span class="line">   \ <span class="string">&quot;owncloud&quot;</span></span><br><span class="line"> 3 / Sharepoint Online, authenticated by Microsoft account.</span><br><span class="line">   \ <span class="string">&quot;sharepoint&quot;</span></span><br><span class="line"> 4 / Sharepoint with NTLM authentication. Usually self-hosted or on-premises.</span><br><span class="line">   \ <span class="string">&quot;sharepoint-ntlm&quot;</span></span><br><span class="line"> 5 / Other site/service or software</span><br><span class="line">   \ <span class="string">&quot;other&quot;</span></span><br><span class="line">vendor&gt; 3  <span class="comment"># 选 3</span></span><br><span class="line">User name. In <span class="keyword">case</span> NTLM authentication is used, the username should be <span class="keyword">in</span> the format <span class="string">&#x27;Domain\User&#x27;</span>.</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">user&gt; [YOUR-EMAIL] <span class="comment"># 邮箱</span></span><br><span class="line">Password.</span><br><span class="line">y) Yes <span class="built_in">type</span> <span class="keyword">in</span> my own password</span><br><span class="line">g) Generate random password</span><br><span class="line">n) No leave this optional password blank (default)</span><br><span class="line">y/g/n&gt; y   <span class="comment"># 用密码，选 y</span></span><br><span class="line">Enter the password:</span><br><span class="line">password:  <span class="comment"># 输入密码，看不见字，可其它地方输好复制，在这里粘贴</span></span><br><span class="line">Confirm the password:</span><br><span class="line">password:  <span class="comment"># </span></span><br><span class="line">Bearer token instead of user/pass (e.g. a Macaroon)</span><br><span class="line">Enter a string value. Press Enter <span class="keyword">for</span> the default (<span class="string">&quot;&quot;</span>).</span><br><span class="line">bearer_token&gt;  <span class="comment"># 空</span></span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line">y/n&gt; </span><br><span class="line">Remote config</span><br><span class="line">--------------------</span><br><span class="line">[OndriveEduHubu]</span><br><span class="line"><span class="built_in">type</span> = webdav</span><br><span class="line">url = https://[YOUR-DOMAIN]-my.sharepoint.com/personal/[YOUR-EMAIL]/Rclone</span><br><span class="line">vendor = sharepoint</span><br><span class="line">user = [YOUR-EMAIL]</span><br><span class="line">pass = *** ENCRYPTED ***</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y/e/d&gt; </span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">aaaaaaaaaaaaaa       webdav</span><br><span class="line">xxxxxxxxxx           onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e/n/d/r/c/s/q&gt;</span><br></pre></td></tr></table></figure></details><h1 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h1><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4ODg4ODM3L2FydGljbGUvZGV0YWlscy8xMTUzMzAzNDg=">https://blog.csdn.net/qq_28888837/article/details/115330348<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">Rclone 挂载 OneDrive</summary>
    
    
    
    
    <category term="Rclone" scheme="https://xiecang.cc/tags/Rclone/"/>
    
    <category term="Onedrive" scheme="https://xiecang.cc/tags/Onedrive/"/>
    
  </entry>
  
  <entry>
    <title>[转]能有效解决问题的提问方法</title>
    <link href="https://xiecang.cc/how-to-ask-questions/"/>
    <id>https://xiecang.cc/how-to-ask-questions/</id>
    <published>2018-03-27T02:02:06.000Z</published>
    <updated>2021-05-08T03:49:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>方法很简单，就是按如下五点原则来提问（注意，这五点原则不仅适用于技术问题，也适用于其他问题）：</p><p><strong>1，描述你需要完成的需求以及目的（目的就是为什么要做这个需求）</strong></p><p><strong>2，描述你的想法或思路</strong></p><p><strong>3，描述具体的实现过程</strong></p><p><strong>4，描述遇到的问题，包括正确信息，报错信息或得到的不正确的信息</strong></p><p><strong>5，有条件则贴出具体实现代码</strong></p><span id="more"></span><hr><p>五点原则的解释：</p><blockquote><p><em>1，为什么要描述你需要完成的需求以及目的？</em></p></blockquote><p>你的做法可能是错误的，描述需求可以帮助他人发现你南辕北辙的解决方案。</p><p>你的需求可能是错的，给出目的可以帮助他人发现你错误的需求。</p><blockquote><p>2，为什么要描述你的想法或思路</p></blockquote><p>描述思路有助于他人搞懂你在做的事情、搞懂你遇到的问题</p><p>你解决问题的想法和思路可能是错的，描述清楚有助于发现错误</p><blockquote><p><em>3，为什么要描述具体的实现过程</em></p></blockquote><p>描述实现过程有助于帮助他人理解你的具体问题</p><blockquote><p><em>4，为什么要描述遇到的问题，包括正确信息，报错信息或得到的不正确的信息</em></p></blockquote><p>对具体信息的描述可以帮助他人分析具体问题，所以要给出错误的具体、完整的信息，而不是残缺的截图或者零散的几句描述</p><blockquote><p><em>5，为什么要贴出具体实现代码</em></p></blockquote><p>如果不尽量给出完整、简化、可运行、可重现问题的代码，他人很难定位具体问题，也就无从解决问题了</p><p>正确范例</p><p><img src="/how-to-ask-questions/%E6%AD%A3%E7%A1%AE%E6%8F%90%E9%97%AE%E8%8C%83%E4%BE%8B.png" alt="正确提问范例" loading="lazy"></p><p>本文转载自微信公众号<code>炼瓜研究所</code></p><p>原文链接： <span class="exturl" data-url="aHR0cDovL21wLndlaXhpbi5xcS5jb20vcy9tUV92ZEE1dEw2M1psblFlWUlwV0p3">http://mp.weixin.qq.com/s/mQ_vdA5tL63ZlnQeYIpWJw<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">如何提问</summary>
    
    
    
    
    <category term="转载" scheme="https://xiecang.cc/tags/%E8%BD%AC%E8%BD%BD/"/>
    
    <category term="提问" scheme="https://xiecang.cc/tags/%E6%8F%90%E9%97%AE/"/>
    
  </entry>
  
</feed>
